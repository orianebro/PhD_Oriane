[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PhD Oriane",
    "section": "",
    "text": "Preface\nThis book keeps track of the work made during the PhD of Oriane Braud, entitled “Multiscale hybrid modeling framework for intercrops: the best of plant and crop models”. This PhD is carried out from November 2023 to 2026 at CIRAD (UMRs AGAP and AMAP), as part of European project IntercropValuES, and is supervised by Myriam Adam, Marc Jaeger, Christophe Pradal, Remi Vezy and Thomas Arsouze.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "abstract.html",
    "href": "abstract.html",
    "title": "Abstract",
    "section": "",
    "text": "1. Concevoir un FSPM contraint par un modèle de culture pour les cultures intercalaires\nUn FSPM dynamique paramétrique, aérien et racinaire, adapté pour les céréales et les légumineuses, et visant à être contraint par les sorties d’un modèle de culture (par exemple, reconstruire la croissance et le développement d’une plante à partir du LAI et de la hauteur du couvert pour la partie aérienne) est en cours de création.\nCela laisse autant de degrés de liberté que la structure 3D implémentée dans le modèle le permet, et donc une variabilité architecturale aussi grande qu’il y a de paramètres architecturaux. En somme, le but est de pouvoir représenter un modèle de culture avec une structure 3D et un arrangement spatial explicite des cultures intercalaires.\nRéalisation : modèle FSPM",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "abstract.html#identifier-les-processus-perfectibles-des-modèles-de-culture",
    "href": "abstract.html#identifier-les-processus-perfectibles-des-modèles-de-culture",
    "title": "Abstract",
    "section": "2. Identifier les processus perfectibles des modèles de culture",
    "text": "2. Identifier les processus perfectibles des modèles de culture\nEn utilisant le FSPM précédemment créé, il sera possible, pour une simulation avec un modèle de culture, d’en obtenir un grand nombre en explorant un espace phénotypique défini pour chaque espèce par les paramètres architecturaux non pris en compte dans le modèle de culture, ainsi qu’en modifiant l’arrangement spatial explicite des cultures intercalaires. Une vaste expérience de simulation sera réalisée pour comprendre comment les différents processus (interception de la lumière, absorption de l’eau et de l’azote, etc.) sont modifiés en fonction des variations des caractéristiques architecturales des plantes, de l’arrangement spatial des cultures intercalaires, mais aussi en tenant compte de l’échelle spatiale et temporelle des processus simulés.\nDes analyses statistiques (comparaison de moyennes, analyse de la variance, de propagation d’incertitude, de sensibilité) seront faites sur les sorties de ces simulations pour identifier les processus pour lesquels la prise en compte d’échelles plus fines a une influence, ainsi que des paramètres d’intérêt.\nLes espèces et variétés de plantes utilisées pour simuler les cultures intercalaires seront choisies en fonction de la paramétrisation existante de STICS pour les cultures intercalaires, ainsi que des expériences disponibles dans le projet IntercropValuES.\nRéalisation : méthodologie + application avec STICS",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "abstract.html#tester-différentes-approches-pour-améliorer-la-prise-en-compte-des-paramètres-structuraux-dintérêt-pour-la-modélisation-des-cultures-intercalaires-dans-les-formalismes-du-modèle-de-culture-stics-intercrop-avec-une-approche-multi-échelle",
    "href": "abstract.html#tester-différentes-approches-pour-améliorer-la-prise-en-compte-des-paramètres-structuraux-dintérêt-pour-la-modélisation-des-cultures-intercalaires-dans-les-formalismes-du-modèle-de-culture-stics-intercrop-avec-une-approche-multi-échelle",
    "title": "Abstract",
    "section": "3. Tester différentes approches pour améliorer la prise en compte des paramètres structuraux d’intérêt pour la modélisation des cultures intercalaires dans les formalismes du modèle de culture STICS-Intercrop avec une approche multi-échelle",
    "text": "3. Tester différentes approches pour améliorer la prise en compte des paramètres structuraux d’intérêt pour la modélisation des cultures intercalaires dans les formalismes du modèle de culture STICS-Intercrop avec une approche multi-échelle\nLes processus identifiés précédemment seront étudiés à différentes échelles spatiales et temporelles. Pour passer d’une échelle (par exemple l’échelle de l’organe) à une autre (par exemple l’échelle de la culture), plusieurs stratégies seront étudiées : comment trouver un modèle analytique équivalent pour l’absorption d’eau en utilisant des hypothèses homogènes (Couveur et al., 2012) ? Comment estimer un modèle de substitution basé sur la sortie du modèle à une échelle plus fine pour capturer les propriétés émergentes ? Ou encore, comment concevoir des modèles hybrides en combinant des modules existants à la même échelle ou à des échelles différentes ?\nCela conduira à de nouveaux formalismes dans le modèle de culture.\nRéalisation : nouveaux formalismes pour la prochaine version de STICS",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "In progress …\nTalk about intercropping as an agro-ecological practice, the barriers, the importance of modeling, the existing models (crop and FSPM) and their characteristics, their limits as for modeling intercrops, focus on evaluating how hypotheses in crop models are off the mark, for processes occuring in shoot and root, and how to modify the formalisms corresping to processes that are off the mark in STICS crop model in particular.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "year_1.html",
    "href": "year_1.html",
    "title": "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
    "section": "",
    "text": "Analysis - shoot: Does considering plant shoot structural variability change a crop model’s outputs in an intercropping context ?\nHypothesis: The error of crop models, when it comes to modeling intercrops, are mainly due to the average plant hypothesis and the non-consideration of the plant shoot architecture.\nIs the variability generated by structural considerations large enough to unvalidate crop model hypotheses ?\nWhat is the sensitivity of intercrops to variations of plant structure (and spatial arrangement) ?\nHow do the uncertainties linked to crop model hypotheses propagate when considering plant structure ?\nDevelop a dynamic shoot parametric FSPM for each type of plant (cereals and legumes, inspiration from OpenAlea models Cereal, L-Pea, WeberPenn, etc., to adapt for intercrops for which we have data), where growth is constrained by outputs from a crop model (e.g. LAI(t) and height(t)), leaving degrees of freedom for features that are not explicitly considered in the crop model (e.g. plant architecture and spatial arrangement).\nImplement well-known structural reactions to stresses.\nRun simulations of various GxGxExM with both FSPM and STICS (stressless and stressed conditions : Vezy et al., 2023; Traore et al., 2022, 2023), varying (define variations ranges) when possible: shoot structures (explore phenotypic space, i.e. create many morphotypes), spatial arrangement (with all same plants or all different to separate effects), env/stresses (N, water, light)\nFrom outputs from my models and from STICS for given processes and given conditions:\n- Compare means and analyze variance of chosen output variables: light intercepted, RUE, N demand /organ, etc.\n- Analyse uncertainty propagation in simulations. Expected results: see which processes are the most impacted by the uncertainty in crop model outputs.\n- Analyse sensitivity of some plant processes to structural variability and spatial heterogeneity. Expected results: spot parameters of interest that can make a change if better considered in a crop model when modeling intercrops.\nUnvalidate some formalisms in STICS",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability"
    ]
  },
  {
    "objectID": "intro_1.html",
    "href": "intro_1.html",
    "title": "2  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html",
    "href": "structural_cereal_model.html",
    "title": "3  Structural cereal model",
    "section": "",
    "text": "3.1 Create a parametric leaf\nReviewNB link: https://app.reviewnb.com/orianebro/PhD_Oriane/blob/main/structural_cereal_model.ipynb\nIn this section, we define a static structural model for cereals.\nThe paragraphs are organized so that it is easy to see how the model is built and how we can play with parameters.\nSome 3D plots are interactive, don’t hesitate to rotate them.\nThe leaf blade is represented as a surface.\nA parametric leaf is here defined by sample points (here 12), described by two sets of coordinates:\n- \\((x,y)\\): coordinates for the midrib in a vertical plane, give the curvature of the leaf;\n- \\((s,r)\\): curviliear abcissa (i.e. length along midrib) and relative length-dependent leaf width.\nNote that \\(s\\) can be expressed as a function of \\(x\\) and \\(y\\), at point \\(p \\neq 0\\), as follows: $ s_p(x,y) = $.\nThe origin represents the leaf base.\nCode\n## Imports\n\n# from installed packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom heapq import *\nfrom scipy.interpolate import splprep, splev\nfrom scipy.integrate import simps, trapz\nfrom openalea.plantgl.all import Vector3\n\n# from openalea.openalea.archicrop\nfrom openalea.archicrop.cereals_leaf import leaf_shape_perez, sr_prevot, parametric_leaf\n# or\n# from openalea.openalea.archicrop.simple_maize import leaf_shape_perez, sr_prevot, parametric_leaf\n# from openalea.openalea.archicrop.fitting import leaf_shape_perez\nfrom openalea.archicrop.generator import curvilinear_abscisse\nfrom openalea.archicrop.fitting import fit2, fit3, simplify\nfrom openalea.archicrop.simplification import distance, cost\n\n## Code for generating a parametric leaf for a cereal \npl=parametric_leaf(nb_segment=10, insertion_angle=40, scurv=0.7, curvature=70, alpha=-2.3)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2) \n# fig.suptitle('Parametric leaf')\n\nax1.plot(pl[0], pl[1], '.-', c=\"green\")\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_title(\"Coordinates of the midrib in a vertical plane\")\n\nax2.plot(pl[2], pl[3], '-', c=\"green\")\nax2.plot(pl[2], -pl[3], '-', c=\"green\")\nax2.plot(np.arange(0,1.1,0.1), np.zeros(11), c=\"green\", ls=\"dashed\")\nax2.set_xlabel('s')\nax2.set_ylabel('r')\nax2.set_title(\"Flattened leaf shape\")\n\nplt.subplots_adjust(hspace=0.5)\n\nplt.show()\nCode\n## Imports\n\n# from installed packages\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom scipy.interpolate import interp2d\nimport matplotlib.tri as mtri\n\n# from openalea.archicrop\nfrom openalea.archicrop.fitting import leaf_to_mesh_2d\n\n## Code for representing the parametric leaf in 3D (ignore excess lines)\nx=pl[0]\ny=pl[1]\ns=pl[2]\nr=pl[3]\n\npts,ind=leaf_to_mesh_2d(x, y, r)\n\nxs=[pt[0] for pt in pts]\nys=[pt[1] for pt in pts]\nzs=[pt[2] for pt in pts]\n    \nX,Y=np.meshgrid(xs, ys)\n\ntri=mtri.Triangulation(xs, ys)\n\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nax.scatter(xs,ys,zs,c=\"green\")\nax.plot(xs,ys,zs,c=\"green\")\nax.plot(xs,np.zeros(len(ys)),zs,c=\"green\",ls=\"dashed\")\nax.set_title(\"3D representation of a leaf shape with curvature\")\nplt.show()\nPlease ignore excess straight lines.\nCode\n# from openalea.archicrop\nfrom openalea.archicrop.cereals_leaf import parametric_leaf\nfrom openalea.archicrop.geometry import leaf_mesh_for_growth, stem_mesh\n\ndef simple_leaf(leaf, ratio):\n    total_length = 80\n    lw_ratio = 7.0\n\n    L_shape = total_length\n    Lw_shape = total_length / lw_ratio\n    length = total_length * ratio\n    s_base = 0\n    s_top = 1.0\n\n    return leaf_mesh_for_growth(leaf, L_shape, Lw_shape, length, s_base, s_top)\nCode\nimport matplotlib.pyplot as plt\nfrom openalea.plantgl.all import Vector3\nfrom oawidgets.plantgl import *\n\n# leaf = parametric_leaf(insertion_angle=30, scurv=0.6, curvature=130, alpha=-2.3)\nleaf = parametric_leaf(insertion_angle=0, scurv=0.5, curvature=0, alpha=-2.3)\nmesh = simple_leaf(leaf, 1) \n\nPlantGL(mesh)\n\n# 326400",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#generate-leaf-azimuth-series",
    "href": "structural_cereal_model.html#generate-leaf-azimuth-series",
    "title": "3  Structural cereal model",
    "section": "3.2 Generate leaf azimuth series",
    "text": "3.2 Generate leaf azimuth series\nLeaves grow around an axis with a given phyllotaxy, represented here as an angle from leaf to leaf (e.g. spiral with a given angle or alternate distichous = \\(180^o\\)).\n\n\nCode\n## Imports\n\n# from installed packages \n# from itertools import cycle\n\n# from openalea.archicrop\nfrom openalea.archicrop.plant_design import leaf_azimuth\n\n## Code for generating leaf azimuths series for a given phyllotaxy\nnb_phy=10\nphyllotactic_angle=137\nspiral=True\nphyllotactic_deviation=0\nplant_orientation=0\n\nla=leaf_azimuth(size=nb_phy, \n                phyllotactic_angle=phyllotactic_angle, \n                phyllotactic_deviation=phyllotactic_deviation, \n                plant_orientation=plant_orientation, \n                spiral=spiral)\n\nx=np.cos(la*np.pi/180)\ny=np.sin(la*np.pi/180)\nz=np.linspace(1,len(la)+1,len(la))\n\nfig,ax=plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of phyllotaxy\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#manage-internode-lengths",
    "href": "structural_cereal_model.html#manage-internode-lengths",
    "title": "3  Structural cereal model",
    "section": "3.3 Manage internode lengths",
    "text": "3.3 Manage internode lengths\nInternodes on an axis have varying lengths. The repartition of their lengths along the axis can be approximated with a geometric model.\n\n\nCode\n## Imports\nfrom openalea.archicrop.plant_shape import geometric_dist\n\n## Code for applying lengths to internodes according to a geometric model\nplant_height=15\nq=1.5\n\nx=np.cos(la*np.pi/180)\ny=np.sin(la*np.pi/180)\nz=geometric_dist(height=plant_height, \n                   nb_phy=nb_phy, \n                   q=q)\n\nfig,ax=plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of the repartition of internode length along the stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#manage-leaf-lengths-as-a-function-of-height",
    "href": "structural_cereal_model.html#manage-leaf-lengths-as-a-function-of-height",
    "title": "3  Structural cereal model",
    "section": "3.4 Manage leaf lengths as a function of height",
    "text": "3.4 Manage leaf lengths as a function of height\nLeaves that grow on an axis have varying lengths. The repartition of their lengths along the axis can be approximated with a bell shaped model.\n\n\nCode\n## Imports\nfrom openalea.archicrop.plant_shape import bell_shaped_dist\n\n## Code for applying lengths to leaves according to a bell shaped model\nmax_leaf_length=50\n\nbsd=bell_shaped_dist(max_leaf_length=max_leaf_length, \n                     nb_phy=nb_phy, \n                     rmax=.8, \n                     skew=0.15)\n\nx=np.cos(la*np.pi/180)*bsd\ny=np.sin(la*np.pi/180)*bsd\nz=geometric_dist(height=plant_height, \n                   nb_phy=nb_phy, \n                   q=q)\n\nfig, ax = plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of the repartition of leaf length along the stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#arrange-a-leaf-to-be-placed-along-a-stem-with-a-given-inclination.",
    "href": "structural_cereal_model.html#arrange-a-leaf-to-be-placed-along-a-stem-with-a-given-inclination.",
    "title": "3  Structural cereal model",
    "section": "3.5 Arrange a leaf to be placed along a stem with a given inclination.",
    "text": "3.5 Arrange a leaf to be placed along a stem with a given inclination.\nA leaf must undergo a translation to be placed against the surface of the stem (tangent to it), and a rotation to be tilted like the stem (inclination = 1 if main stem).\n\n\nCode\n## Imports\n\n# from installed packages\nfrom math import pi, cos, sin, radians\nimport openalea.plantgl.all as pgl\n\n# from openalea.archicrop\n# from openalea.archicrop.cereals_leaf import arrange_leaf\n# or \nfrom openalea.archicrop.geometry import arrange_leaf\n\n## Code for placing a leaf against a stem element (here a cylinder), with a given inclination\nstem_diameter=0.5\ninclination=1\n\nal=arrange_leaf(leaf=pl, \n                stem_diameter=stem_diameter, \n                inclination=inclination, \n                relative=True)\n\nx=al[0]\ny=al[1]\ns=al[2]\nr=al[3]\n\npts,ind=leaf_to_mesh_2d(x, y, r)\n\nxs=[pt[0] for pt in pts]\nys=[pt[1] for pt in pts]\nzs=[pt[2] for pt in pts]\n    \nX,Y=np.meshgrid(xs, ys)\n\ntri=mtri.Triangulation(xs, ys)\n\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nax.plot(xs,ys,zs,c=\"green\")\nax.plot([xs[0],xs[0]],[ys[0],-ys[0]],[0,0],c=\"green\")\nax.plot(xs,np.zeros(len(ys)),zs,c=\"green\",ls=\"dashed\")\n\nradius=stem_diameter/2\nz=np.linspace(-zs[-1], zs[-1])\ntheta=np.linspace(0, 2*np.pi)\ntheta_grid, z_stem=np.meshgrid(theta, z)\nx_stem=radius*np.cos(theta_grid)\ny_stem=radius*np.sin(theta_grid)\n\nax.plot_surface(x_stem, y_stem, z_stem, color=\"green\")\n\nax.set_title(\"3D representation of the placement of a leaf along a stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#build-the-whole-plant-shoot-in-3d-as-an-mtg.",
    "href": "structural_cereal_model.html#build-the-whole-plant-shoot-in-3d-as-an-mtg.",
    "title": "3  Structural cereal model",
    "section": "3.6 Build the whole plant shoot in 3D, as an MTG.",
    "text": "3.6 Build the whole plant shoot in 3D, as an MTG.\nAn MTG (Multiscale Tree Graph) is created as a representation of a parametrized cereal shoot.\nThe different scales are: - Plant\n- Axis\n- Stem / Leaf\n\n\nCode\n## Imports\n\n# from installed packages\nimport openalea.plantgl.all as pgl\nfrom openalea.mtg.turtle import TurtleFrame\nfrom openalea.mtg import MTG, fat_mtg\nfrom scipy.interpolate import interp1d\nimport pandas\n\n# from openalea.archicrop\nfrom openalea.archicrop.cereals import build_shoot",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#display-scenes-according-to-different-scenarii",
    "href": "structural_cereal_model.html#display-scenes-according-to-different-scenarii",
    "title": "3  Structural cereal model",
    "section": "3.7 Display scenes according to different scenarii",
    "text": "3.7 Display scenes according to different scenarii\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.plantgl import *\n\n# Set nice color for plants\nnice_green=Color3((50,100,0))\n\n\n\n3.7.1 A single cereal\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.plantgl import *\n\n# from openalea.archicrop\nfrom openalea.archicrop.display import display_mtg, build_scene, display_scene\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating a 3D cereal shoot from descritive parameters\n# Parameters \nheight=220                 \nnb_phy=22 # (15, 25, 35) # 22\nmax_leaf_length=90 # (60, 90, 120) # 90\n\n\n\n\n\nshoot, g = build_shoot(nb_phy=nb_phy,\n                        height=height,\n                        max_leaf_length=max_leaf_length,\n                        wl=0.12, # (0.1, 0.13) # 0.12\n                        diam_base=2.5, \n                        diam_top=0.5, \n                        insertion_angle=30, # (30, 60) # 30\n                        scurv=0.6, # (0.3, 0.6, 0.9) # 0.6\n                        curvature=135, # (0, 45, 90, 135) # 130\n                        alpha=-2.3, \n                        stem_q=1, # (1, 1.1)\n                        rmax=0.67, \n                        skew=0.05, # 0.0005\n                        phyllotactic_angle=180,\n                        phyllotactic_deviation=0)\n\n# Build and display scene\nscene_single, nump = build_scene(g, \n                                 leaf_material=Material(nice_green), \n                                 stem_material=Material(nice_green))\n# display_scene(scene_single) # display in separate window\nPlantGL(scene_single) # display in notebook\n\n\n\n\n\n\n\nCode\n# help(g)\n\n\n\n\nCode\ng.vertices()\n\n\n[0,\n 1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46]\n\n\n\n\nCode\nfor id in g.vertices():\n    print(g[id])\n\n\n{'vid': 0, 'index': 0, 'complex': None, 'parent': None, 'scale': 0}\n{'edge_type': '/', 'label': 'Plant', 'vid': 1, 'index': 1, 'complex': 0, 'parent': None, 'scale': 1}\n{'edge_type': '/', 'label': 'MainAxis', 'vid': 2, 'index': 2, 'complex': 1, 'parent': None, 'scale': 2}\n{'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 0.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DBD0&gt;, 'anchor_point': Vector3(0,0,0), 'vid': 3, 'index': 3, 'complex': 2, 'parent': None, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 0.9511930974888486, 'visible_length': 0.9511930974888486, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 0.9511930974888486, 'leaf_area': 0.08142914778393873, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.11414317169866182, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DCB0&gt;, 'anchor_point': Vector3(0,0,2), 'vid': 4, 'index': 4, 'complex': 2, 'parent': 3, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DE00&gt;, 'anchor_point': Vector3(0,0,2), 'vid': 5, 'index': 5, 'complex': 2, 'parent': 3, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 1.9059330852612248, 'visible_length': 1.9059330852612248, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 1.9059330852612248, 'leaf_area': 0.32693228329440344, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.22871197023134698, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DE70&gt;, 'anchor_point': Vector3(0,0,4), 'vid': 6, 'index': 6, 'complex': 2, 'parent': 5, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DEE0&gt;, 'anchor_point': Vector3(0,0,4), 'vid': 7, 'index': 7, 'complex': 2, 'parent': 5, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 4.203195281771148, 'visible_length': 4.203195281771148, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 4.203195281771148, 'leaf_area': 1.5900165519032914, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.5043834338125377, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DF50&gt;, 'anchor_point': Vector3(0,0,6), 'vid': 8, 'index': 8, 'complex': 2, 'parent': 7, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DFC0&gt;, 'anchor_point': Vector3(0,0,6), 'vid': 9, 'index': 9, 'complex': 2, 'parent': 7, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 8.83557884827753, 'visible_length': 8.83557884827753, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 8.83557884827753, 'leaf_area': 7.0260708225716355, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 1.0602694617933035, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E030&gt;, 'anchor_point': Vector3(0,0,8), 'vid': 10, 'index': 10, 'complex': 2, 'parent': 9, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E0A0&gt;, 'anchor_point': Vector3(0,0,8), 'vid': 11, 'index': 11, 'complex': 2, 'parent': 9, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 15.332907866380747, 'visible_length': 15.332907866380747, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 15.332907866380747, 'leaf_area': 21.15882572750285, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 1.8399489439656895, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E180&gt;, 'anchor_point': Vector3(0,0,10), 'vid': 12, 'index': 12, 'complex': 2, 'parent': 11, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.352941176470587, 'length': 2.352941176470587, 'visible_length': 2.352941176470587, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E110&gt;, 'anchor_point': Vector3(0,0,10), 'vid': 13, 'index': 13, 'complex': 2, 'parent': 11, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 19.02386194977697, 'visible_length': 19.02386194977697, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 19.02386194977697, 'leaf_area': 32.57165911357548, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 2.2828634339732363, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E1F0&gt;, 'anchor_point': Vector3(0,0,12.3529), 'vid': 14, 'index': 14, 'complex': 2, 'parent': 13, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470587, 'length': 12.352941176470587, 'visible_length': 12.352941176470587, 'is_green': True, 'diameter': 2.375, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E2D0&gt;, 'anchor_point': Vector3(0,0,12.3529), 'vid': 15, 'index': 15, 'complex': 2, 'parent': 13, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 23.967297224216356, 'visible_length': 23.967297224216356, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 23.967297224216356, 'leaf_area': 51.69882026105361, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 2.8760756669059626, 'stem_diameter': 2.375, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E340&gt;, 'anchor_point': Vector3(0,0,24.7059), 'vid': 16, 'index': 16, 'complex': 2, 'parent': 15, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 2.25, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E260&gt;, 'anchor_point': Vector3(0,0,24.7059), 'vid': 17, 'index': 17, 'complex': 2, 'parent': 15, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 29.981386234328838, 'visible_length': 29.981386234328838, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 29.981386234328838, 'leaf_area': 80.89951684788024, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 3.5977663481194604, 'stem_diameter': 2.25, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E3B0&gt;, 'anchor_point': Vector3(0,0,37.0588), 'vid': 18, 'index': 18, 'complex': 2, 'parent': 17, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 2.125, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E420&gt;, 'anchor_point': Vector3(0,0,37.0588), 'vid': 19, 'index': 19, 'complex': 2, 'parent': 17, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 37.102890598360794, 'visible_length': 37.102890598360794, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 37.102890598360794, 'leaf_area': 123.89620416785367, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 4.452346871803295, 'stem_diameter': 2.125, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E490&gt;, 'anchor_point': Vector3(0,0,49.4118), 'vid': 20, 'index': 20, 'complex': 2, 'parent': 19, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 2.0, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E500&gt;, 'anchor_point': Vector3(0,0,49.4118), 'vid': 21, 'index': 21, 'complex': 2, 'parent': 19, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 45.25830541217596, 'visible_length': 45.25830541217596, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 45.25830541217596, 'leaf_area': 184.3482787903616, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 5.430996649461115, 'stem_diameter': 2.0, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E5E0&gt;, 'anchor_point': Vector3(0,0,61.7647), 'vid': 22, 'index': 22, 'complex': 2, 'parent': 21, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 1.875, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E650&gt;, 'anchor_point': Vector3(0,0,61.7647), 'vid': 23, 'index': 23, 'complex': 2, 'parent': 21, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 54.21687176025305, 'visible_length': 54.21687176025305, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 54.21687176025305, 'leaf_area': 264.5522265120952, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 6.506024611230366, 'stem_diameter': 1.875, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E570&gt;, 'anchor_point': Vector3(0,0,74.1176), 'vid': 24, 'index': 24, 'complex': 2, 'parent': 23, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.75, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E6C0&gt;, 'anchor_point': Vector3(0,0,74.1176), 'vid': 25, 'index': 25, 'complex': 2, 'parent': 23, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 63.55172805490181, 'visible_length': 63.55172805490181, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 63.55172805490181, 'leaf_area': 363.4939924887774, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 7.626207366588217, 'stem_diameter': 1.75, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E730&gt;, 'anchor_point': Vector3(0,0,86.4706), 'vid': 26, 'index': 26, 'complex': 2, 'parent': 25, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.625, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E7A0&gt;, 'anchor_point': Vector3(0,0,86.4706), 'vid': 27, 'index': 27, 'complex': 2, 'parent': 25, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 72.62533208163514, 'visible_length': 72.62533208163514, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 72.62533208163514, 'leaf_area': 474.6994973971004, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 8.715039849796216, 'stem_diameter': 1.625, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E810&gt;, 'anchor_point': Vector3(0,0,98.8235), 'vid': 28, 'index': 28, 'complex': 2, 'parent': 27, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 1.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E880&gt;, 'anchor_point': Vector3(0,0,98.8235), 'vid': 29, 'index': 29, 'complex': 2, 'parent': 27, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 80.61723053443279, 'visible_length': 80.61723053443279, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 80.61723053443279, 'leaf_area': 584.9224073137694, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 9.674067664131934, 'stem_diameter': 1.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E8F0&gt;, 'anchor_point': Vector3(0,0,111.176), 'vid': 30, 'index': 30, 'complex': 2, 'parent': 29, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.375, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E960&gt;, 'anchor_point': Vector3(0,0,111.176), 'vid': 31, 'index': 31, 'complex': 2, 'parent': 29, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 86.60794057547501, 'visible_length': 86.60794057547501, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 86.60794057547501, 'leaf_area': 675.084183365251, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.392952869057002, 'stem_diameter': 1.375, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E9D0&gt;, 'anchor_point': Vector3(0,0,123.529), 'vid': 32, 'index': 32, 'complex': 2, 'parent': 31, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.25, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EA40&gt;, 'anchor_point': Vector3(0,0,123.529), 'vid': 33, 'index': 33, 'complex': 2, 'parent': 31, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 89.71989570308179, 'visible_length': 89.71989570308179, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 89.71989570308179, 'leaf_area': 724.4693716474686, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.766387484369814, 'stem_diameter': 1.25, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EAB0&gt;, 'anchor_point': Vector3(0,0,135.882), 'vid': 34, 'index': 34, 'complex': 2, 'parent': 33, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 1.125, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EB20&gt;, 'anchor_point': Vector3(0,0,135.882), 'vid': 35, 'index': 35, 'complex': 2, 'parent': 33, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 89.29602709763027, 'visible_length': 89.29602709763027, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 89.29602709763027, 'leaf_area': 717.6402409878648, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.715523251715632, 'stem_diameter': 1.125, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EB90&gt;, 'anchor_point': Vector3(0,0,148.235), 'vid': 36, 'index': 36, 'complex': 2, 'parent': 35, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.0, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EC00&gt;, 'anchor_point': Vector3(0,0,148.235), 'vid': 37, 'index': 37, 'complex': 2, 'parent': 35, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 85.07441274901828, 'visible_length': 85.07441274901828, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 85.07441274901828, 'leaf_area': 651.3890134131291, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.208929529882193, 'stem_diameter': 1.0, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EC70&gt;, 'anchor_point': Vector3(0,0,160.588), 'vid': 38, 'index': 38, 'complex': 2, 'parent': 37, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 0.875, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3ECE0&gt;, 'anchor_point': Vector3(0,0,160.588), 'vid': 39, 'index': 39, 'complex': 2, 'parent': 37, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 77.30371162173756, 'visible_length': 77.30371162173756, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 77.30371162173756, 'leaf_area': 537.8277447447086, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 9.276445394608507, 'stem_diameter': 0.875, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3ED50&gt;, 'anchor_point': Vector3(0,0,172.941), 'vid': 40, 'index': 40, 'complex': 2, 'parent': 39, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 0.75, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EDC0&gt;, 'anchor_point': Vector3(0,0,172.941), 'vid': 41, 'index': 41, 'complex': 2, 'parent': 39, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 66.74940731793457, 'visible_length': 66.74940731793457, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 66.74940731793457, 'leaf_area': 400.9935039565983, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 8.009928878152149, 'stem_diameter': 0.75, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EE30&gt;, 'anchor_point': Vector3(0,0,185.294), 'vid': 42, 'index': 42, 'complex': 2, 'parent': 41, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470551, 'length': 12.352941176470551, 'visible_length': 12.352941176470551, 'is_green': True, 'diameter': 0.625, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EEA0&gt;, 'anchor_point': Vector3(0,0,185.294), 'vid': 43, 'index': 43, 'complex': 2, 'parent': 41, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 54.569663998970206, 'visible_length': 54.569663998970206, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 54.569663998970206, 'leaf_area': 268.0063406064454, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 6.548359679876424, 'stem_diameter': 0.625, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EF10&gt;, 'anchor_point': Vector3(0,0,197.647), 'vid': 44, 'index': 44, 'complex': 2, 'parent': 43, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 0.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EF80&gt;, 'anchor_point': Vector3(0,0,197.647), 'vid': 45, 'index': 45, 'complex': 2, 'parent': 43, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 42.08458621271703, 'visible_length': 42.08458621271703, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 42.08458621271703, 'leaf_area': 159.40011570260506, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 5.050150345526043, 'stem_diameter': 0.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EFF0&gt;, 'anchor_point': Vector3(0,0,210), 'vid': 46, 'index': 46, 'complex': 2, 'parent': 45, 'scale': 3}\n\n\nLet’s dig into the propreties of the MTG of a cereal shoot.\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.mtg import *\n\n\n## Code for exploring the MTG of the generated cereal shoot\n\n# Properties on the MTG: this exclude all the topological properties\nprint(g_single.property_names())\n\n# Retrieve one property for the MTG (dict)\n\nlabels = g_single.property('label')\n# print(labels)\n\ni_length = g_single.property('mature_length')\nl_length = g_single.property('shape_mature_length')\n\nleaf_lengths=[]\nleaf_ind=[]\ninternode_lengths=[]\ninternode_ind=[]\nfor k,v in i_length.items():\n    internode_ind.append(k)\n    internode_lengths.append(v)\nfor k,v in l_length.items():\n    leaf_ind.append(k)\n    leaf_lengths.append(v)\n\n\n\nplt.figure()\nplt.plot(leaf_ind, leaf_lengths, c=\"green\", label=\"Leaf lengths\") # == 'shape_mature_length' for final plant\nplt.plot(internode_ind, internode_lengths, c=\"orange\", label=\"Internode lengths\")\nplt.plot(internode_ind, np.cumsum(internode_lengths), c=\"orange\", label=\"Plant height\", ls='--')\nplt.xlabel(\"Vertices\")\nplt.ylabel(\"Lengths (cm)\")\nplt.title(\"MTG properties\")\nplt.legend()\nplt.show()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[15], line 10\n      4 from oawidgets.mtg import *\n      7 ## Code for exploring the MTG of the generated cereal shoot\n      8 \n      9 # Properties on the MTG: this exclude all the topological properties\n---&gt; 10 print(g_single.property_names())\n     12 # Retrieve one property for the MTG (dict)\n     14 labels = g_single.property('label')\n\nNameError: name 'g_single' is not defined\n\n\n\nThe leaf lengths and widths follow the bell shaped curve described before.\nThe first internode in the MTG actually corresponds to the pseudostem, i.e. the about 4 to 8 short first internodes that rapidly lose their leaves. The lengths following internodes follow the geometric model described before.\n\n\n['Plant', 'Leaf', 'Stem', 'MainAxis']\n[]\nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \n\n\n\n        \n        \n\n\n\n\n3.7.2 A cereal crop with variability\n\n\nCode\n## Imports\n\n# from installed packages\nfrom random import *\n\n# from openalea.archicrop\nfrom openalea.archicrop.stand import agronomic_plot\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating a random cereal crop from descritive parameters with variability \n# Fix a seed\n#seed(1)\n\n# Initialize the list of plants\nplants_in_crop=[]\n\n# Fixed parameters for all plants\nlength_plot=5\nwidth_plot=5\nsowing_density=10\nplant_density=5\ninter_row=0.5\nnplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, \n                                                               width_plot, \n                                                               sowing_density, \n                                                               plant_density, \n                                                               inter_row, \n                                                               noise=0.1)\n\n# For loop over all the plants in the crop\nfor n in range(nplants):\n    # Parameters varying among plants\n    height=300*(1+random()-0.5) \n    nb_phy=15\n    max_leaf_length=50*(1+random()-0.5)\n    insertion_angle=40*(1+random()-0.5)\n    scurv=0.7*(1+random()-0.5)\n    curvature=70*(1+random()-0.5)\n    phyllotactic_angle=137*(1+random()-0.5)\n\n    # Functions calls\n    shoot, g_var = build_shoot(nb_phy=nb_phy, height=height, max_leaf_length=max_leaf_length, \n                                wl=0.1, diam_base=2.5, diam_top=1.0, \n                                insertion_angle=insertion_angle, scurv=scurv, curvature=curvature, \n                                alpha=-2.3, stem_q=1.25, rmax=0.9, skew=0.2,\n                                phyllotactic_angle=phyllotactic_angle, phyllotactic_deviation=15, plant_orientation=random()*360, spiral=True)\n\n    # Fill the list of plants\n    plants_in_crop.append(g_var)\n\n# Build and display scene\nscene_var, nump = build_scene(plants_in_crop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\n# display_scene(scene_var)\nPlantGL(scene_var)\n\n\n\n\n3.7.3 An intercrop organized in rows\n\n\nCode\n## Imports\n\n# from installed packages\nfrom openalea.plantgl.all import Material, Color3, Shape, Scene, Viewer, Translated, AxisRotated\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating an intercrop from descritive parameters\n\n# Fix a seed\nseed(1)\n\ndef plant(height, nb_phy, max_leaf_length, phyllotactic_angle):\n    \"\"\" return the MTG of a cereal shoot generative from descriptive parameters \"\"\"\n    \n    shoot, g = build_shoot(nb_phy=nb_phy, height=height, max_leaf_length=max_leaf_length, phyllotactic_angle=phyllotactic_angle, plant_orientation=random()*360)\n    return g\n\n\n# Organize the plant mixture in alternate rows\nn_rows = 10\nlen_rows = 10\n\nd_inter = 70\nd_intra = 50\n\ndef plant_in_row(i):\n     if i%(4*d_inter)==0 or i%(4*d_inter)==d_inter: return plant(height=1700, nb_phy=18, max_leaf_length=100, phyllotactic_angle=137)\n     else: return plant(height=900, nb_phy=18, max_leaf_length=40, phyllotactic_angle=60)\n\n\nplants_in_intercrop = [plant_in_row(x) for x in range(0, n_rows*d_inter, d_inter) for y in range(0, len_rows*d_intra, d_intra)]\n\npositions=[(x,y,0) for x in range(0, n_rows*d_inter, d_inter) for y in range(0, len_rows*d_intra, d_intra)]\n\n# Build and display scene\nscene_ic, nump = build_scene(plants_in_intercrop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\n# display_scene(scene_ic)\nPlantGL(scene_ic)",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#tillering-branching",
    "href": "structural_cereal_model.html#tillering-branching",
    "title": "3  Structural cereal model",
    "section": "3.8 Tillering / Branching",
    "text": "3.8 Tillering / Branching\nFirst, basipetal tillers, straight, oriented according to a certain angle, appearing according to a certain timing\nParameters : number, maximal order, reduction factor, tiller appearance rate (&gt;1 phyllochron or not? several mechanisms depending on species, keep it simple at first), insertion angle (same as leaf ?), tiller curvature, condition related to density (ex: hyp sorghum im field –&gt; no tiller)\nFor the final structure: When visiting the phytomers from the base, the tillers will be allocated sequentially to the short internodes, following their age and, for a given age, following the ascending order of tiller order, in the limits of the total number of tillers and the maximal order allowed for tillers. Some geometrical features (length, stem diameter, max leaf length, etc.) will be reduced by a given reduction ratio (order-dependent ?). The angles of the tillers\nHow do we manage the leaves of the short internodes bearing tillers ? Do we consider them at all ?\nFor growth: the age (start_tt and end_tt) is determined by a tiller appearance rate, expressed as a function of the phyllochron (and the order ?)\nsee weberpenn Ecomeristem Evers Abichou",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#next-steps",
    "href": "structural_cereal_model.html#next-steps",
    "title": "3  Structural cereal model",
    "section": "3.9 Next steps",
    "text": "3.9 Next steps\n\nModify leaf shape + wavy leaves ?\nAdapt for different species (parameters for cereals, some functions for legumes)",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html",
    "href": "dynamic_model.html",
    "title": "4  Dynamic model",
    "section": "",
    "text": "4.1 Conceptual diagram\nReviewNB link: https://app.reviewnb.com/orianebro/PhD_Oriane/blob/main/dynamic_model.ipynb\nThe main stem grows according to the crop model’s plant height.\nThe appearance of a leaf is triggered by fixed phyllochron (different for tillers?).\nThe angle of the leaf with its axis is leaf-age dependent. The leaf blade curvature depends on the angle with the axis and the leaf length.\nThe reproductive organs appear from a given thermal time, when the leaves have stopped growing. Leaf senescence is constrained by crop model, as it has a direct influence on LAI (green LAI vs. yellow LAI ?).\nThe branching pattern is set (Tillers (Zhu et al., 2015)).",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#time-dependent-parametrization-of-leaf-area",
    "href": "dynamic_model.html#time-dependent-parametrization-of-leaf-area",
    "title": "4  Dynamic model",
    "section": "4.2 Time-dependent parametrization of leaf area",
    "text": "4.2 Time-dependent parametrization of leaf area\n\\[ \\mathcal{A_normalized} = 2 * \\left|\\int_{0}^{1} \\mathcal{C}(l(u))dl(u)\\right| \\] \\[ \\mathcal{A} = \\mathcal{A_scaled} = 2 * w * \\left|\\int_{0}^{L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)\\frac{dl(u)}{L}\\right| \\] \\[ \\frac{d\\mathcal{A}}{dt} = 2 * w * \\left|\\int_{dl(t)/L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)\\frac{dl(u)}{L}\\right| \\]\n\n\\(\\mathcal{A}\\) : final leaf area (or surface), in \\(cm^2\\) (given by crop model)\n\\(\\frac{d\\mathcal{A}}{dt}\\) : gain in area, in \\(cm^2\\), for a given leaf for a given time step \\(dt\\) (given by crop model)\n\n\\(\\mathcal{C}\\) : curve of the evolution of the leaf width along the leaf, from tip to base\n\\(l(t)\\) : curvilinear abscissa of the midrib, in \\(cm\\), as a function of thermal time \\(t\\), such that: $ dl(t) = $ (computed from leaf curvature)\n\\(w\\) : final maximal width of the leaf, in \\(cm\\)\n\\(L\\) : final length of the leaf, in \\(cm\\)\n\\(t\\) : thermal time, in \\(^oC.day\\)\n\nThe objective is to find, for each growing leaf, at each time step, and for a given leaf area provided to the leaf \\(\\frac{d\\mathcal{A}}{dt}\\), how much length \\(dl(t)\\) is added to the leaf.\n\\[ \\frac{d\\mathcal{A}}{dt} = 2w \\left|\\int_{l(t-1)/L}^{l(t)/L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)d\\frac{l(u)}{L}\\right| \\]\nAccording to the Fundamental Theorem of Calculus, \\(\\mathcal{C}\\) being at least \\(C^0\\) on \\([0,L]\\), \\(F\\) being the antiderivative of \\(\\mathcal{C}\\), we can write:\n\\[ \\frac{d\\mathcal{A}}{dt} = 2w \\left|F\\left(\\frac{l(t)}{L}\\right) - F\\left(\\frac{l(t-1)}{L}\\right)\\right| \\]\n\\[ F\\left(\\frac{l(t)}{L}\\right) = \\left|\\frac{1}{2w} \\frac{d\\mathcal{A}}{dt} + F\\left(\\frac{l(t-1)}{L}\\right)\\right| \\]\nKnowing the other variables, we know have to determine \\(l(t)\\) at thermal time \\(t\\).",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#apparition-and-growth-of-phytomers-stem-and-leaf",
    "href": "dynamic_model.html#apparition-and-growth-of-phytomers-stem-and-leaf",
    "title": "4  Dynamic model",
    "section": "4.3 Apparition and growth of phytomers (stem and leaf)",
    "text": "4.3 Apparition and growth of phytomers (stem and leaf)\nThe height of the plant/canopy (here we consider the height of the main stem) is given by the crop model.\nThe plastochron (i.e. leaf initiation rate, in \\(leaf^{-1}\\)) is the time interval between two successive leaves produced at the SAM.\nThe phyllochron (i.e. leaf emergence rate, in \\(leaf^{-1}\\)) is the time interval between two successive leaves emerging from the top of the former leaf sheath.\nThe time for a leaf to grow is roughly between 1.5 and 2 phyllochrons.\nWe consider a linear (rough approximation of beta function) growth for the leaf.\n\n\\(\\phi\\) : phyllochron, in \\(^oC.day.leaf^{-1}\\) (literature)\ncur_len_int : current length of growing internodes\nfin_len_int : final length of internodes, in \\(cm\\) (literature, bell shaped model too ?)\nheight : plant height, in \\(cm\\) (given by crop model)\n\\([s(t)]\\) : current length of growing leaves, in \\(cm\\) (computed before)\nfin_len_leaf : final length of leaves, in \\(cm\\) (bell shaped model)\nleaf expansion duration, as \\(x * \\phi\\), in \\(^oC.day\\) (literature, cf Clerget et al., 2008, etc)\n\nCf Fournier et al, 2005; Stewart and Dwyer, 1993; Skinner and Nelson, 1995",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#distribution-of-constraint-over-growing-vegetative-organs-i.e.-internodes-and-leaves-within-a-plant",
    "href": "dynamic_model.html#distribution-of-constraint-over-growing-vegetative-organs-i.e.-internodes-and-leaves-within-a-plant",
    "title": "4  Dynamic model",
    "section": "4.4 Distribution of constraint over growing vegetative organs (i.e. internodes and leaves) within a plant",
    "text": "4.4 Distribution of constraint over growing vegetative organs (i.e. internodes and leaves) within a plant\n\n4.4.1 H0: All growing vegetative organs of a given type grow at the same speed on a given time slot, i.e. equal distribution of the gain among all growing vegetative organs.\nFor a growing vegetative organ \\(i\\) over \\(n\\) growing vegetative organs in a plant, given a constraint \\(dc(t)\\) for the plant a time \\(t\\) : \\[dc_{i}(t) = \\frac{dc(t)}{n}\\]\n\n\n4.4.2 H1: Growing vegetative organs receive a gain proportional to their sink strength related to their age until end of growth.\nFor a growing vegetative organ \\(i\\) over \\(n\\) growing vegetative organs in a plant (set \\(G^n\\)), of ages \\(a_i\\), sink strength beta function \\(\\beta (a_i)\\) and relative sink strength \\(p_i(a_i)\\), given a constraint \\(dc(t)\\) for the plant a time \\(t\\) : \\[p_i(a_i) = \\frac{\\beta (a_i)}{\\sum_{j \\in G^n} \\beta (a_j)}\\] \\[dc_i(t) = p_i(a_i) dc(t)\\]",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#visualize-a-growing-plant",
    "href": "dynamic_model.html#visualize-a-growing-plant",
    "title": "4  Dynamic model",
    "section": "4.5 Visualize a growing plant",
    "text": "4.5 Visualize a growing plant\n\n\nCode\n## Imports\n\n# from installed packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom openalea.plantgl.all import Vector3\nfrom oawidgets.plantgl import *\n\n# from archicrop\nfrom openalea.archicrop.cereals_leaf import parametric_leaf\nfrom openalea.archicrop.plant_shape import geometric_dist, bell_shaped_dist, compute_leaf_area\nfrom openalea.archicrop.plant_design import leaf_azimuth\nfrom openalea.archicrop.cereals import build_shoot\nfrom openalea.archicrop.display import display_mtg, build_scene, display_scene\n\n# Enable plotting with PlantGL\n%gui qt\n\n# Set nice color for plants\nnice_green=Color3((50,100,0))\n\n## Code for generating a 3D cereal shoot from descritive parameters\n\n# Parameters \nheight=220                 # from crop model\nnb_phy=22\nmax_leaf_length=90\n\n\nshoot, g = build_shoot(nb_phy=nb_phy,\n                        height=height,\n                        max_leaf_length=max_leaf_length,\n                        wl=0.12, diam_base=2.5, diam_top=0.5, \n                        insertion_angle=30, scurv=0.6, curvature=130,\n                        alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                        phyllotactic_angle=180,\n                        phyllotactic_deviation=0)\n\n# Build and display scene\nscene, nump = build_scene(g, \n                          leaf_material=Material(nice_green), \n                          stem_material=Material(nice_green))\n# display_scene(scene_single) # display in separate window\n# PlantGL(scene) # display in notebook\n\n\n\n\nCode\nfrom ipywidgets import interact, interactive, IntSlider, fixed\nfrom openalea.archicrop.dynamic import grow_plant, grow_plant_and_display\n\ndef grow_plant_and_display_in_NB(g, time):\n    g, scene, nump=grow_plant_and_display(g, time, phyllochron=35)\n    w=PlantGL(scene, group_by_color=True)\n    w.wireframe=True\n    return w\n\n# max_time = max(g.property('end_tt').values())\ninteract(grow_plant_and_display_in_NB, g=fixed(g), time=IntSlider(min=20, max=2000, step=20, value=2000))\n\n\n\n\n\n&lt;function __main__.grow_plant_and_display_in_NB(g, time)&gt;\n\n\n\n\nCode\nfrom oawidgets.mtg import plot as MTGw\nMTGw(g, properties='label')\n# g.display()\ng.property('shape_mature_length')\n\n\nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \n\n\n{}",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#fit-plant-growth-and-development-to-lait-and-heightt-curves-from-crop-model",
    "href": "dynamic_model.html#fit-plant-growth-and-development-to-lait-and-heightt-curves-from-crop-model",
    "title": "4  Dynamic model",
    "section": "4.6 Fit plant growth and development to LAI(t) and height(t) curves from crop model",
    "text": "4.6 Fit plant growth and development to LAI(t) and height(t) curves from crop model\nTwo constraints :\n\\[ \\mathcal{A} = \\mathcal{A_scaled} = 2 w |\\int_{L}^{0} \\mathcal{C}(\\frac{s(u)}{L})d\\frac{s(u)}{L}| \\] where \\[\\mathcal{C}(x) = \\alpha x^2 - 2 (\\alpha + \\sqrt{-\\alpha}) x + 2 \\sqrt{-\\alpha} + \\alpha\\]\nand \\[ \\text{leaf length} = L  e^{-\\log(skew) * (2 (z - zmax)^2 + (z - zmax)^3)} \\]\n\n\nCode\nfrom scipy.optimize import curve_fit, least_squares\n\n# Sources\n# Toungos, 2019, 10.5281/Zendo.2653098. \n# dos Santos et al., 2022, 10.3389/fpls.2022.872738\n\ndef parametric_model_sorghum(thermal_time, max_leaf_length, phyllochron):\n    \"\"\"\n    Define parametric model.\n\n    Args:\n    - thermal_time: Input values\n    - max_leaf_length, phyllochron: Parameters of the model\n\n    Returns:\n    - leaf_areas: Output values corresponding to the model\n    \"\"\"\n    \n    height=240                 # from crop model\n    nb_phy=22\n    # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=nb_phy,\n                            height=height,\n                            max_leaf_length=max_leaf_length,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=150, \n                            alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=0)\n\n\n    leaf_areas = []\n    for t in thermal_time:\n        leaf_areas.append(sum(compute_leaf_area(grow_plant(g, time=t, phyllochron=phyllochron))))\n\n    return leaf_areas\n\n\n\n4.6.1 From STICS simulation for sorghum\n\n\nCode\n## From a STICS simulation for maize\n\ndef read_columns_from_file(filename, separator=';'):\n    with open(filename, 'r') as file:\n        columns = []\n        for line in file:\n            values = line.strip().split(separator) # Strip any extra whitespace and split the line by the separator\n            if not columns:\n                columns = [[] for _ in values]\n            while len(columns) &lt; len(values):\n                columns.append([])\n            for i, value in enumerate(values):\n                columns[i].append(value)\n            # Handle lines with fewer values than columns\n            for i in range(len(values), len(columns)):\n                columns[i].append('')\n    return columns\n\n\nfilename = 'mod_ssorghum.sti'\ncolumns = read_columns_from_file(filename)\ncolumns = columns[5:]\n\nstart = 23\nend = 94\ndensity = 0.001 # density = 20 plants/m2 = 0.002 plants/cm2\ncm_la = [float(i)/density for i in columns[1][start:end]] \ncm_height = [float(i) for i in columns[2][start:end]]\ncm_tt = np.cumsum([float(i) for i in columns[0][start:end]])\n\nx_data = []\ny_data = []\nfor i,t in enumerate(cm_tt):\n    x_data.append(t)\n    y_data.append(cm_la[i])\nx_data = np.array(x_data)  # input data\ny_data = np.array(y_data)  # output data\n\n\n\n\nCode\n# Fit the model to crop model data and obtain optimal parameters\noptimal_params, covariance = curve_fit(f=parametric_model_sorghum, xdata=x_data, ydata=y_data, bounds=([20,40],[120,90]), method='trf') # bounds to set from lit\nse = np.sqrt(np.diag(covariance))\n\nprint(\"                  Max leaf length  Phyllochron\")\nprint(\"Optimized parameters:\", optimal_params)\n# print(\"Covariances:\", covariance)\nprint(\"Standard errors:\", se)\n\n# Visualize the fit\nplt.clf()\nplt.scatter(x_data, y_data, color=(57/255,157/255,99/255), label='Simulation with STICS') # R 243, G 146, B 0\nres = parametric_model_sorghum(x_data, *optimal_params)\nplt.plot(x_data, np.array(res), color=(57/255,151/255,88/255), label='Simulation with ArchiCrop') # R 57, G 151, B 88\nplt.xlabel('Thermal time (°C.d)', fontsize=24)\nplt.ylabel('LAI', fontsize=24)\n# plt.legend()\nplt.show()\n\n\n                  Max leaf length  Phyllochron\nOptimized parameters: [41.39727998 65.        ]\nStandard errors: [0.2923194 0.       ]\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define the model function\ndef parametric_model_sorghum_ls(params, thermal_time, y_data):\n    \"\"\"\n    Define parametric model.\n\n    Args:\n    - thermal_time: Input values\n    - max_leaf_length, phyllochron: Parameters of the model\n\n    Returns:\n    - leaf_areas: Output values corresponding to the model\n    \"\"\"\n\n    max_leaf_length=params[0]\n    phyllochron=params[1]\n    \n    height=240                 # from crop model\n    nb_phy=22\n    # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=nb_phy,\n                            height=height,\n                            max_leaf_length=max_leaf_length,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=150, \n                            alpha=-2.3, stem_q=1.1, rmax=0.9, skew=0.0005, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=0)\n\n\n    leaf_areas = []\n    for t in thermal_time:\n        leaf_areas.append(sum(compute_leaf_area(grow_plant(g, time=t, phyllochron=phyllochron))))\n\n    return y_data - leaf_areas\n\n\n\n\nCode\n# Initial guess for the parameters\nx0 = [100, 60]\n\n# Perform the least squares optimization\nresult = least_squares(parametric_model_sorghum_ls, x0, args=(x_data, y_data), method='dogbox')\n\n# Extract the optimized parameters\nmax_leaf_length_opt, phyllochron_opt = result.x\nprint(\"                   Max leaf length  Phyllochron\")\nprint(\"Optimized parameters:\", max_leaf_length_opt, phyllochron_opt)\n\n# Visualize the fit\nplt.clf()\nplt.scatter(x_data, y_data, label='Data')\nplt.plot(x_data, parametric_model_sorghum(x_data, *result.x), color='red', label='Fitted Curve')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n\n                   Max leaf length  Phyllochron\nOptimized parameters: 69.01972368453055 59.99998703438266\n\n\n\n\n\n\n\n\n\n\n\nCode\n## Imports\n\n# from installed packages\nfrom random import *\n\n# from archicrop\nfrom openalea.archicrop.stand import agronomic_plot\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating ...\n# Fix a seed\nseed(100)\n\n# Initialize the list of plants\nplants_in_crop=[]\n\n# Fixed parameters for all plants\nlength_plot=5\nwidth_plot=5\nsowing_density=8\nplant_density=8\ninter_row=0.4\nnplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, \n                                                               width_plot, \n                                                               sowing_density, \n                                                               inter_row, \n                                                               noise=0.1)\n\n# For loop over all the plants in the crop\nfor n in range(nplants):\n\n    # Parameters \n    # max_leaf_length=optimal_params[0]\n    # phyllochron=50\n\n    # height=240                 # from crop model\n    # nb_phy=22\n    # # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=26,\n                            height=223,\n                            max_leaf_length=100,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=90, \n                            alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=30,\n                            plant_orientation=0)\n    \n    # Fill the list of plants\n    plants_in_crop.append(g) # put all plants in the same mtg to be able to visualize the dynamic growth easily\n\n# Build and display scene\nscene_var, nump = build_scene(plants_in_crop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\nPlantGL(scene_var)\n# interact(grow_plant_and_display_in_NB, g=fixed(plants_in_crop), time=IntSlider(min=20, max=2000, step=20, value=1000))\n\n\n\n\n\n\n\nCode\nx_data = []\ny_data = []\nfor i,t in enumerate(cm_tt):\n    x_data.append(t)\n    y_data.append(cm_height[i])\nx_data = np.array(x_data)  # input data\ny_data = np.array(y_data)  # output data\n\nplt.clf()\nplt.scatter(x_data, y_data, color=(243/255,146/255,0/255), label='Simulation with STICS') # R 243, G 146, B 0\nplt.xlabel('Thermal time (°C.d)', fontsize=24)\nplt.ylabel('Height (m)', fontsize=24)\n# plt.legend()\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#leaf-senescence",
    "href": "dynamic_model.html#leaf-senescence",
    "title": "4  Dynamic model",
    "section": "4.7 Leaf senescence",
    "text": "4.7 Leaf senescence\nYellow leaves corresponding to yellow LAI in STICS\nAge-dependent senescence, from tip to base, following the same dynamics as growth dynamics",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#next-steps",
    "href": "dynamic_model.html#next-steps",
    "title": "4  Dynamic model",
    "section": "4.8 Next steps",
    "text": "4.8 Next steps\n\nFit for height (problem of non matching supposed vs actual height)\nBending dynamics of leaves and tillers",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "light_inter.html",
    "href": "light_inter.html",
    "title": "5  Light interception with Caribu",
    "section": "",
    "text": "5.1 Next steps\nIn progress …\nWe have to configure Caribu to simulate the same light as in STICS\nimport os\nos.cpu_count()\n\n16",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Light interception with Caribu</span>"
    ]
  },
  {
    "objectID": "light_inter.html#next-steps",
    "href": "light_inter.html#next-steps",
    "title": "5  Light interception with Caribu",
    "section": "",
    "text": "Configure Caribu to mimic what happens in STICS’ 2.5D formalism, cf https://vezy.github.io/STICS-IC-paper/\nSimulations to run with IFB Cloud",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Light interception with Caribu</span>"
    ]
  },
  {
    "objectID": "year_2.html",
    "href": "year_2.html",
    "title": "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability",
    "section": "",
    "text": "Analysis - root : Would considering root structure in an intercropping system be relevant for crop models ?\nHypothesis: The error of crop models, when it comes to modeling intercrops, are mainly due to the average plant hypothesis and the non-consideration of the plant root architecture.\nCreate a dynamic root FSPM for all 4 plants (cf lit), that enables to constrain root growth with density=f(depth) from STICS, in STICS’ 1D soil.\nImplement well-known structural reactions to stresses.\nRun simulations with both FSPM and STICS (stressless and stressed conditions : Vezy et al., 2023; Traore et al., 2022, 2023), varying (define variations ranges) when possible: root structures, spatial arrangement (with all same plants or all different to separate effects), env/stresses (N, water, light)\nFrom outputs from my models and from STICS for given processes and given conditions:\nCompare means and analyze variance of chosen output variables: water and N uptake, N fixing, etc.\nAnalyse uncertainty propagation in simulations; expected results: see which processes (integrated in root density) are the most impacted by the uncertainty in STICS’ root density.\nAnalyse sensitivity of some plant processes to structural variability (and spatial heterogeneity). Expected results: spot parameters of interest to implement in STICS as a parameter or different equation.\nCouple shoot and root models (when ?)\nCollaboration with post-doc from WUR, Jie Lu",
    "crumbs": [
      "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability"
    ]
  },
  {
    "objectID": "intro_2.html",
    "href": "intro_2.html",
    "title": "6  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "year_3.html",
    "href": "year_3.html",
    "title": "Third chapter: Improving STICS",
    "section": "",
    "text": "Modeling : How to model intercrops more accurately at crop scale, considering spatial issues when needed ?\nHypothesis: New crop models formalisms created through a multiscale approach would enable a better accuracy of the crop models.\nWhich formalisms would enable to translate spatial and structural considerations for chosen plant processes in a crop model ?\nFor each plant process targeted previously:\n- Develop formalisms to implement in STICS, by any appropriate method.\n- Run simulations and compare with simulations with previous version and with field data, to make sure new version of STICS fits data even better. (see with Mathilde de Freitas ?)",
    "crumbs": [
      "Third chapter: Improving STICS"
    ]
  },
  {
    "objectID": "intro_3.html",
    "href": "intro_3.html",
    "title": "7  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "Third chapter: Improving STICS",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction</span>"
    ]
  }
]