[
  {
    "objectID": "structural_cereal_model.html",
    "href": "structural_cereal_model.html",
    "title": "3  Structural cereal model",
    "section": "",
    "text": "3.1 Create a parametric leaf\nThe leaf blade is represented as a surface.\nA parametric leaf is here defined by sample points (here 12), described by two sets of coordinates:\n- \\((x,y)\\): coordinates for the midrib in a vertical plane, give the curvature of the leaf;\n- \\((s,r)\\): curviliear abcissa (i.e. length along midrib) and relative length-dependent leaf width.\nNote that \\(s\\) can be expressed as a function of \\(x\\) and \\(y\\), at point \\(p \\neq 0\\), as follows: $ s_p(x,y) = $.\nThe origin represents the leaf base.\nCode\n## Imports\n\n# from installed packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom heapq import *\nfrom scipy.interpolate import splprep, splev\nfrom scipy.integrate import simps, trapz\nfrom openalea.plantgl.all import Vector3\n\n# from openalea.openalea.archicrop\nfrom openalea.archicrop.cereals_leaf import leaf_shape_perez, sr_prevot, parametric_leaf\n# or\n# from openalea.openalea.archicrop.simple_maize import leaf_shape_perez, sr_prevot, parametric_leaf\n# from openalea.openalea.archicrop.fitting import leaf_shape_perez\nfrom openalea.archicrop.generator import curvilinear_abscisse\nfrom openalea.archicrop.fitting import fit2, fit3, simplify\nfrom openalea.archicrop.simplification import distance, cost\n\n## Code for generating a parametric leaf for a cereal \npl=parametric_leaf(nb_segment=10, insertion_angle=40, scurv=0.7, curvature=70, alpha=-2.3)\n\nfig, (ax1, ax2) = plt.subplots(nrows=2) \n# fig.suptitle('Parametric leaf')\n\nax1.plot(pl[0], pl[1], '.-', c=\"green\")\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_title(\"Coordinates of the midrib in a vertical plane\")\n\nax2.plot(pl[2], pl[3], '-', c=\"green\")\nax2.plot(pl[2], -pl[3], '-', c=\"green\")\nax2.plot(np.arange(0,1.1,0.1), np.zeros(11), c=\"green\", ls=\"dashed\")\nax2.set_xlabel('s')\nax2.set_ylabel('r')\nax2.set_title(\"Flattened leaf shape\")\n\nplt.subplots_adjust(hspace=0.5)\n\nplt.show()\nCode\n## Imports\n\n# from installed packages\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom scipy.interpolate import interp2d\nimport matplotlib.tri as mtri\n\n# from openalea.archicrop\nfrom openalea.archicrop.fitting import leaf_to_mesh_2d\n\n## Code for representing the parametric leaf in 3D (ignore excess lines)\nx=pl[0]\ny=pl[1]\ns=pl[2]\nr=pl[3]\n\npts,ind=leaf_to_mesh_2d(x, y, r)\n\nxs=[pt[0] for pt in pts]\nys=[pt[1] for pt in pts]\nzs=[pt[2] for pt in pts]\n    \nX,Y=np.meshgrid(xs, ys)\n\ntri=mtri.Triangulation(xs, ys)\n\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nax.scatter(xs,ys,zs,c=\"green\")\nax.plot(xs,ys,zs,c=\"green\")\nax.plot(xs,np.zeros(len(ys)),zs,c=\"green\",ls=\"dashed\")\nax.set_title(\"3D representation of a leaf shape with curvature\")\nplt.show()\nPlease ignore excess straight lines.\nCode\n# from openalea.archicrop\nfrom openalea.archicrop.cereals_leaf import parametric_leaf\nfrom openalea.archicrop.geometry import leaf_mesh_for_growth, stem_mesh\n\ndef simple_leaf(leaf, ratio):\n    total_length = 80\n    lw_ratio = 7.0\n\n    L_shape = total_length\n    Lw_shape = total_length / lw_ratio\n    length = total_length * ratio\n    s_base = 0\n    s_top = 1.0\n\n    return leaf_mesh_for_growth(leaf, L_shape, Lw_shape, length, s_base, s_top)\nCode\nimport matplotlib.pyplot as plt\nfrom openalea.plantgl.all import Vector3\nfrom oawidgets.plantgl import *\n\n# leaf = parametric_leaf(insertion_angle=30, scurv=0.6, curvature=130, alpha=-2.3)\nleaf = parametric_leaf(insertion_angle=0, scurv=0.5, curvature=0, alpha=-2.3)\nmesh = simple_leaf(leaf, 1) \n\nPlantGL(mesh)\n\n# 326400",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#generate-leaf-azimuth-series",
    "href": "structural_cereal_model.html#generate-leaf-azimuth-series",
    "title": "3  Structural cereal model",
    "section": "3.2 Generate leaf azimuth series",
    "text": "3.2 Generate leaf azimuth series\nLeaves grow around an axis with a given phyllotaxy, represented here as an angle from leaf to leaf (e.g. spiral with a given angle or alternate distichous = \\(180^o\\)).\n\n\nCode\n## Imports\n\n# from installed packages \n# from itertools import cycle\n\n# from openalea.archicrop\nfrom openalea.archicrop.plant_design import leaf_azimuth\n\n## Code for generating leaf azimuths series for a given phyllotaxy\nnb_phy=10\nphyllotactic_angle=137\nspiral=True\nphyllotactic_deviation=0\nplant_orientation=0\n\nla=leaf_azimuth(size=nb_phy, \n                phyllotactic_angle=phyllotactic_angle, \n                phyllotactic_deviation=phyllotactic_deviation, \n                plant_orientation=plant_orientation, \n                spiral=spiral)\n\nx=np.cos(la*np.pi/180)\ny=np.sin(la*np.pi/180)\nz=np.linspace(1,len(la)+1,len(la))\n\nfig,ax=plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of phyllotaxy\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#manage-internode-lengths",
    "href": "structural_cereal_model.html#manage-internode-lengths",
    "title": "3  Structural cereal model",
    "section": "3.3 Manage internode lengths",
    "text": "3.3 Manage internode lengths\nInternodes on an axis have varying lengths. The repartition of their lengths along the axis can be approximated with a geometric model.\n\n\nCode\n## Imports\nfrom openalea.archicrop.plant_shape import geometric_dist\n\n## Code for applying lengths to internodes according to a geometric model\nplant_height=15\nq=1.5\n\nx=np.cos(la*np.pi/180)\ny=np.sin(la*np.pi/180)\nz=geometric_dist(height=plant_height, \n                   nb_phy=nb_phy, \n                   q=q)\n\nfig,ax=plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of the repartition of internode length along the stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#manage-leaf-lengths-as-a-function-of-height",
    "href": "structural_cereal_model.html#manage-leaf-lengths-as-a-function-of-height",
    "title": "3  Structural cereal model",
    "section": "3.4 Manage leaf lengths as a function of height",
    "text": "3.4 Manage leaf lengths as a function of height\nLeaves that grow on an axis have varying lengths. The repartition of their lengths along the axis can be approximated with a bell shaped model.\n\n\nCode\n## Imports\nfrom openalea.archicrop.plant_shape import bell_shaped_dist\n\n## Code for applying lengths to leaves according to a bell shaped model\nmax_leaf_length=50\n\nbsd=bell_shaped_dist(max_leaf_length=max_leaf_length, \n                     nb_phy=nb_phy, \n                     rmax=.8, \n                     skew=0.15)\n\nx=np.cos(la*np.pi/180)*bsd\ny=np.sin(la*np.pi/180)*bsd\nz=geometric_dist(height=plant_height, \n                   nb_phy=nb_phy, \n                   q=q)\n\nfig, ax = plt.subplots(subplot_kw=dict(projection='3d'))\nfor i,a in enumerate(la):\n    ax.plot(np.linspace(0,x[i],2), np.linspace(0,y[i],2), [z[i],z[i]], c=\"green\")\nax.plot([0,0], [0,0], [0,z[-1]], c=\"green\")\n\nax.set_title(\"3D representation of the repartition of leaf length along the stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#arrange-a-leaf-to-be-placed-along-a-stem-with-a-given-inclination.",
    "href": "structural_cereal_model.html#arrange-a-leaf-to-be-placed-along-a-stem-with-a-given-inclination.",
    "title": "3  Structural cereal model",
    "section": "3.5 Arrange a leaf to be placed along a stem with a given inclination.",
    "text": "3.5 Arrange a leaf to be placed along a stem with a given inclination.\nA leaf must undergo a translation to be placed against the surface of the stem (tangent to it), and a rotation to be tilted like the stem (inclination = 1 if main stem).\n\n\nCode\n## Imports\n\n# from installed packages\nfrom math import pi, cos, sin, radians\nimport openalea.plantgl.all as pgl\n\n# from openalea.archicrop\n# from openalea.archicrop.cereals_leaf import arrange_leaf\n# or \nfrom openalea.archicrop.geometry import arrange_leaf\n\n## Code for placing a leaf against a stem element (here a cylinder), with a given inclination\nstem_diameter=0.5\ninclination=1\n\nal=arrange_leaf(leaf=pl, \n                stem_diameter=stem_diameter, \n                inclination=inclination, \n                relative=True)\n\nx=al[0]\ny=al[1]\ns=al[2]\nr=al[3]\n\npts,ind=leaf_to_mesh_2d(x, y, r)\n\nxs=[pt[0] for pt in pts]\nys=[pt[1] for pt in pts]\nzs=[pt[2] for pt in pts]\n    \nX,Y=np.meshgrid(xs, ys)\n\ntri=mtri.Triangulation(xs, ys)\n\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nax.plot(xs,ys,zs,c=\"green\")\nax.plot([xs[0],xs[0]],[ys[0],-ys[0]],[0,0],c=\"green\")\nax.plot(xs,np.zeros(len(ys)),zs,c=\"green\",ls=\"dashed\")\n\nradius=stem_diameter/2\nz=np.linspace(-zs[-1], zs[-1])\ntheta=np.linspace(0, 2*np.pi)\ntheta_grid, z_stem=np.meshgrid(theta, z)\nx_stem=radius*np.cos(theta_grid)\ny_stem=radius*np.sin(theta_grid)\n\nax.plot_surface(x_stem, y_stem, z_stem, color=\"green\")\n\nax.set_title(\"3D representation of the placement of a leaf along a stem\")\n\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#build-the-whole-plant-shoot-in-3d-as-an-mtg.",
    "href": "structural_cereal_model.html#build-the-whole-plant-shoot-in-3d-as-an-mtg.",
    "title": "3  Structural cereal model",
    "section": "3.6 Build the whole plant shoot in 3D, as an MTG.",
    "text": "3.6 Build the whole plant shoot in 3D, as an MTG.\nAn MTG (Multiscale Tree Graph) is created as a representation of a parametrized cereal shoot.\nThe different scales are: - Plant\n- Axis\n- Stem / Leaf\n\n\nCode\n## Imports\n\n# from installed packages\nimport openalea.plantgl.all as pgl\nfrom openalea.mtg.turtle import TurtleFrame\nfrom openalea.mtg import MTG, fat_mtg\nfrom scipy.interpolate import interp1d\nimport pandas\n\n# from openalea.archicrop\nfrom openalea.archicrop.cereals import build_shoot",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#display-scenes-according-to-different-scenarii",
    "href": "structural_cereal_model.html#display-scenes-according-to-different-scenarii",
    "title": "3  Structural cereal model",
    "section": "3.7 Display scenes according to different scenarii",
    "text": "3.7 Display scenes according to different scenarii\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.plantgl import *\n\n# Set nice color for plants\nnice_green=Color3((50,100,0))\n\n\n\n3.7.1 A single cereal\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.plantgl import *\n\n# from openalea.archicrop\nfrom openalea.archicrop.display import display_mtg, build_scene, display_scene\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating a 3D cereal shoot from descritive parameters\n# Parameters \nheight=220                 \nnb_phy=22 # (15, 25, 35) # 22\nmax_leaf_length=90 # (60, 90, 120) # 90\n\n\n\n\n\nshoot, g = build_shoot(nb_phy=nb_phy,\n                        height=height,\n                        max_leaf_length=max_leaf_length,\n                        wl=0.12, # (0.1, 0.13) # 0.12\n                        diam_base=2.5, \n                        diam_top=0.5, \n                        insertion_angle=30, # (30, 60) # 30\n                        scurv=0.6, # (0.3, 0.6, 0.9) # 0.6\n                        curvature=135, # (0, 45, 90, 135) # 130\n                        alpha=-2.3, \n                        stem_q=1, # (1, 1.1)\n                        rmax=0.67, \n                        skew=0.05, # 0.0005\n                        phyllotactic_angle=180,\n                        phyllotactic_deviation=0)\n\n# Build and display scene\nscene_single, nump = build_scene(g, \n                                 leaf_material=Material(nice_green), \n                                 stem_material=Material(nice_green))\n# display_scene(scene_single) # display in separate window\nPlantGL(scene_single) # display in notebook\n\n\n\n\n\n\n\nCode\nhelp(g)\n\n\nHelp on MTG in module openalea.mtg.mtg object:\n\nclass MTG(openalea.mtg.tree.PropertyTree)\n |  MTG(filename='', has_date=False)\n |\n |  A Multiscale Tree Graph (MTG) class.\n |\n |  MTGs describe tree structures at different levels\n |  of details, named scales.\n |  For example, a botanist can described plants at different scales :\n |\n |      - at scale 0, the whole scene.\n |      - at scale 1, the individual plants.\n |      - at scale 2, the axes of each plants.\n |      - at scale 3, the growth units of each axis, and so on.\n |\n |  Each scale can have a label, e.g. :\n |\n |   - scale 1 : P(lant)\n |   - scale 2 : A(xis)\n |   - sclae 3 : U(nit of growth)\n |\n |  Compared to a classical tree, :func:`complex` can be seen as :func:`parent`\n |  and :func:`components` as :func:`children`.\n |  An element at :func:`scale` N belongs to a :func:`complex` at :func:`scale` N-1 and has :func:`components` at scale N+1:\n |\n |   - /P/A/U (decomposition is noted using \"/\")\n |\n |  Each scale is itself described as a tree or a forest (i.e. set of trees), e.g.:\n |\n |   - /P1/P2/P3\n |   - A1+A2&lt;A3\n |   - ...\n |\n |  Method resolution order:\n |      MTG\n |      openalea.mtg.tree.PropertyTree\n |      openalea.mtg.tree.Tree\n |      builtins.object\n |\n |  Methods defined here:\n |\n |  AlgHeight(self, v1, v2)\n |      Algebraic value defining the number of components between two components.\n |\n |      This function is similar to function `Height(v1, v2)` : it returns the number of components\n |      between two components, at the same scale, but takes into account the order of vertices\n |      `v1` and `v2`.\n |\n |      The result is positive if `v1` is an ancestor of `v2`,\n |      and negative if `v2` is an ancestor of `v1`.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          AlgHeight(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG.\n |          - v2 (int) : vertex of the active MTG.\n |\n |      :Returns:\n |\n |          int\n |\n |          If `v1` is not an ancestor of `v2` (or vise versa), or if `v1` and `v2` are not defined\n |          at the same scale, an error value None is returned.\n |\n |      .. seealso:: :func:`MTG`, :func:`Rank`, :func:`Order`, :func:`Height`, :func:`EdgeType`, :func:`AlgOrder`, :func:`AlgRank`.\n |\n |  AlgOrder(self, v1, v2)\n |      Algebraic value defining the relative order of one vertex with respect to another one.\n |\n |      This function is similar to function `Order(v1, v2)` : it returns the number of `+`-type edges\n |      between two components, at the same scale, but takes into account the order of vertices\n |      `v1` and `v2`.\n |\n |      The result is positive if `v1` is an ancestor of `v2`,\n |      and negative if `v2` is an ancestor of `v1`.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          AlgOrder(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG.\n |          - v2 (int) : vertex of the active MTG.\n |\n |      :Returns:\n |\n |          int\n |\n |          If `v1` is not an ancestor of `v2` (or vise versa), or if `v1` and `v2` are not defined\n |          at the same scale, an error value None is returned.\n |\n |\n |      .. seealso:: :func:`MTG`, :func:`Rank`, :func:`Order`, :func:`Height`, :func:`EdgeType`, :func:`AlgHeight`, :func:`AlgRank`.\n |\n |  AlgRank(self, v1, v2)\n |      Algebraic value defining the relative rank of one vertex with respect to another one.\n |\n |      This function is similar to function `Rank(v1, v2)` : it returns the number of `&lt;`-type edges\n |      between two components, at the same scale, but takes into account the order of vertices\n |      `v1` and `v2`.\n |\n |      The result is positive if `v1` is an ancestor of `v2`,\n |      and negative if `v2` is an ancestor of `v1`.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          AlgRank(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG.\n |          - v2 (int) : vertex of the active MTG.\n |\n |      :Returns:\n |\n |          int\n |\n |          If `v1` is not an ancestor of `v2` (or vise versa), or if `v1` and `v2` are not defined\n |          at the same scale, an error value None is returned.\n |\n |      .. seealso:: :func:`MTG`, :func:`Rank`, :func:`Order`, :func:`Height`, :func:`EdgeType`, :func:`AlgHeight`, :func:`AlgOrder`.\n |\n |  Ancestors(self, v, EdgeType='*', RestrictedTo='NoRestriction', ContainedIn=None)\n |      Array of all vertices which are ancestors of a given vertex\n |\n |      This function returns the array of vertices which are located\n |      before the vertex passed as an argument.\n |      These vertices are defined at the same scale as `v`. The array starts by `v`,\n |      then contains the vertices on the path from `v` back to the root (in this order)\n |      and finishes by the tree root.\n |\n |      .. note:: The anscestor array always contains at least the argument vertex `v`.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Ancestors(v)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. `Father`\n |          - ContainedIn (int): cf. `Father`\n |          - EdgeType (str): cf. `Father`\n |\n |      :Returns:\n |\n |          list of vertices's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; v # prints vertex v\n |          78\n |          &gt;&gt;&gt; g.Ancestors(v) # set of ancestors of v at the same scale\n |          [78,45,32,10,4]\n |          &gt;&gt;&gt; list(reversed(g.Ancestors(v))) # To get the vertices in the order from the root to the vertex v\n |          [4,10,32,45,78]\n |\n |\n |      .. seealso:: :func:`MTG`, :func:`Descendants`.\n |\n |  Axis(self, v, Scale=-1)\n |      Array of vertices constituting a botanical axis\n |\n |      An axis is a maximal sequence of vertices connected by '&lt;'-type edges.\n |      Axis return the array of vertices representing the botanical axis which the argument v belongs to.\n |      The optional argument enables the user to choose the scale at which the axis decomposition is required.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Axis(v)\n |          Axis(v, Scale=s)\n |\n |      :Parameters:\n |\n |          - v (int) : Vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - Scale (str): scale at which the axis components are required.\n |\n |      :Returns:\n |\n |          list of vertices ids\n |\n |      .. image:: ../user/mtg_axis.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Path`, :func:`Ancestors`.\n |\n |  Class = class_name(self, vid)\n |\n |  ClassScale(self, c)\n |      Scale at which appears a given class of vertex\n |\n |      Every vertex is associated with a unique class.\n |      Vertices from a given class only appear at a given scale\n |      which can be retrieved using this function.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          ClassScale(c)\n |\n |      :Parameters:\n |\n |          - `c` (str) : symbol of the considered class\n |\n |      :Returns:\n |\n |          int\n |\n |      .. seealso:: :func:`MTG`, :func:`Class`, :func:`Scale`, :func:`Index`.\n |\n |  Complex(self, v, Scale=-1)\n |      Complex of a vertex.\n |\n |      Returns the complex of `v`. The complex of a vertex `v` has a scale lower than `v` :\n |      `Scale(v)` - 1. In a MTG, every vertex except for the MTG root (cf. `MTGRoot`),\n |      has a uniq complex. None is returned if the argument is the MTG Root\n |      or if the vertex is undefined.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Complex(v)\n |          g.Complex(v, Scale=2)\n |\n |      :Parameters:\n |\n |          - `v` (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - `Scale` (int) : scale of the complex\n |\n |      :Returns:\n |\n |          Returns vertex's id (int)\n |\n |      :Details:\n |\n |          When a scale different form Scale(v)-1 is specified using the optional parameter\n |          `Scale`, this scale must be lower than that of the vertex argument.\n |\n |      .. todo:: Complex(v, Scale=10) returns v why ? is this expected\n |\n |      .. seealso:: :func:`MTG`, :func:`Components`.\n |\n |  ComponentRoots(self, v, Scale=-1)\n |      Set of roots of the tree graphs that compose a vertex\n |\n |      In a MTG, a vertex may have be decomposed into components.\n |      Some of these components are connected to each other, while other are not.\n |      In the most general case, the components of a vertex are organized into several tree-graphs.\n |      This is for example the case of a MTG containing the description of several plants:\n |      the MTG root vertex can be decomposed into tree graphs (not connected)\n |      that represent the different plants.\n |      This function returns the set of roots of these tree graphs at scale *Scale(v)+1*.\n |      The order of these roots is not significant.\n |\n |      When a scale different from *Scale(v)+1* is specified using the optional argument :func:`Scale`,\n |      this scale must be greater than that of the vertex argument.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.ComponentRoots(v)\n |          g.ComponentRoots(v, Scale=s)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - Scale (str): scale of the component roots.\n |\n |      :Returns:\n |\n |          list of vertices's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; v=g.MTGRoot() # global MTG root\n |          0\n |          &gt;&gt;&gt; g.ComponentRoots(v) # set of first vertices at scale 1\n |          [1,34,76,100,199,255]\n |          &gt;&gt;&gt; g.ComponentRoots(v, Scale=2) # set of first vertices at scale 2\n |          [2,35,77,101,200,256]\n |\n |      .. image:: ../user/mtg_componentroots.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Components`, :func:`Trunk`.\n |\n |  Components(self, v, Scale=-1)\n |      Set of components of a vertex.\n |\n |      The set of components of a vertex is returned as a list of vertices.\n |      If **s** defines the scale of **v**, components are defined at scale **s** + 1.\n |      The array is empty if the vertex has no components.\n |      The order of the components in the array is not significant.\n |\n |      When a scale is specified using optional argument :arg:Scale,\n |      it must be necessarily greater than the scale of the argument.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Components(v)\n |          Components(v, Scale=2)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - Scale (int) : scale of the components.\n |\n |      :Returns:\n |\n |          list of int\n |\n |      .. image:: ../user/mtg_components.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Complex`.\n |\n |  Defined(self, vid)\n |      Test whether a given vertex belongs to the active MTG.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Defined(v)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Returns:\n |\n |          True or False\n |\n |      .. seealso:: :func:`MTG`.\n |\n |  Descendants(self, v, EdgeType='*', RestrictedTo='NoRestriction', ContainedIn=None)\n |      Set of vertices in the branching system borne by a vertex.\n |\n |      This function returns the set of descendants of its argument as an array of vertices.\n |      The array thus consists of all the vertices, at the same scale as `v`,\n |      that belong to the branching system starting at `v`.\n |      The order of the vertices in the array is not significant.\n |\n |      .. note:: The argument always belongs to the set of its descendants.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Descendants(v)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. `Father`\n |          - ContainedIn (int): cf. `Father`\n |          - EdgeType (str): cf. `Father`\n |\n |      :Returns:\n |\n |          list of int.\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; v\n |          78\n |          &gt;&gt;&gt; g.Sons(v) # set of sons of v\n |          [78,99,101]\n |          &gt;&gt;&gt; g.Descendants(v) # set of descendants of v\n |          [78,99,101,121,133,135,156,171,190]\n |\n |      .. image:: ../user/mtg_descendants.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Ancestors`.\n |\n |  EdgeType(self, v1, v2)\n |      Type of connection between two vertices.\n |\n |      Returns the symbol of the type of connection between two vertices (either `&lt;` or `+`).\n |      If the vertices are not connected, None is returned.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          EdgeType(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG\n |          - v2 (int) : vertex of the active MTG\n |\n |      :Returns:\n |\n |          '&lt;' (successor), '+' (branching) or `None`\n |\n |      .. image:: ../user/mtg_edgetype.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Sons`, :func:`Father`.\n |\n |  Extremities(self, v, RestrictedTo='NoRestriction', ContainedIn=None)\n |      Set of vertices that are the extremities of the branching system\n |      born by a given vertex.\n |\n |      This function returns the extremities of the branching system defined by the argument\n |      as a list of vertices. These vertices have the same scale as `v` and their order in\n |      the list is not signifiant. The result is always a non empty array.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Extremities(v)\n |\n |      :Properties:\n |\n |          -  v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. :func:`Father`\n |          - ContainedIn (int): cf. :func:`Father`\n |\n |      :Returns:\n |\n |          list of vertices's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; g.Descendants(v)\n |          [3, 45, 47, 78, 102]\n |          &gt;&gt;&gt; g.Extremities(v)\n |          [47, 102]\n |\n |      .. seealso:: :func:`MTG`, :func:`Descendants`, :func:`Root`, :func:`MTGRoot`.\n |\n |  Father(self, v, EdgeType='*', RestrictedTo='NoRestriction', ContainedIn=None, Scale=-1)\n |      Topological father of a given vertex.\n |\n |      Returns the topological father of a given vertex. And `None` if the father does not exist.\n |      If the argument is not a valid vertex, `None` is returned.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Father(v)\n |          g.Father(v, EdgeType='&lt;')\n |          g.Father(v, RestrictedTo='SameComplex')\n |          g.Father(v, ContainedIn=complex_id)\n |          g.Father(v, Scale=s)\n |\n |      :Parameters:\n |\n |          v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          If no optional argument is specified,  the function returns the topological father\n |          of the argument (vertex that bears or precedes to the vertex passed as an argument).\n |\n |          It may be usefull in some cases to consider that the function only applies to a\n |          subpart of the MTG (e.g. an axis).\n |\n |          The following options enables us to specify such restrictions:\n |\n |          - EdgeType (str) : filter on the type of edge that connect the vertex to its father.\n |\n |            Values can be '&lt;', '+', and '*'. Values '*' means both '&lt;' and '+'.\n |            Only the vertex connected with the specified type of edge will be considered.\n |\n |          - RestrictedTo (str) : filter defining a subpart of the MTG where the father\n |            must be considered. If the father is actually outside this subpart,\n |            the result is `None`. Possible subparts are defined using keywords in\n |            ['SameComplex', 'SameAxis', 'NoRestriction'].\n |\n |            For instance, if `RestrictedTo` is set to 'SameComplex', :func:`Father(v)` returns a\n |            defined vertex only if the father `f` of `v` existsin the MTG and if `v` and `f`\n |            have the same complex.\n |\n |          - ContainedIn (int) : filter defining a subpart of the MTG where the father\n |            must be considered. If the father is actually outside this subpart,\n |            the result is `None`.\n |\n |            In this case, the subpart of the MTG is made of the vertices\n |            that composed `composite_id` (at any scale).\n |\n |          - Scale (int) : the scale of the considered father. Returns the vertex from scale `s`\n |            which either bears and precedes the argument.\n |\n |            The scale `s` can be lower than the argument's (corresponding to a question such as\n |            'which axis bears the internode?') or greater\n |            (e.g. 'which internodes bears this annual shoot?').\n |\n |      :Returns:\n |\n |          the vertex id of the Father (int)\n |\n |      .. seealso:: :func:`MTG`, :func:`Defined`, :func:`Sons`, :func:`EdgeType`, :func:`Complex`, :func:`Components`.\n |\n |  Height(self, v1, v2=None)\n |      Number of components existing between two components in a tree graph.\n |\n |      The height of a vertex (`v2`) with respect to another vertex (`v1`)\n |      is the number of edges (of either type '+' or '&lt;') that must be crossed\n |      when going from `v1` to `v2` in the graph.\n |\n |      This is a non-negative integer. When the function has only one argument `v1`,\n |      the height of `v1` correspond to the height of `v1`with respect\n |      to the root of the branching system containing `v1`.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Height(v1)\n |          Height(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG\n |          - v2 (int) : vertex of the active MTG\n |\n |      :Returns:\n |\n |          int\n |\n |      .. note::\n |\n |          When the function takes two arguments, the order of the arguments is not important\n |          provided that one is an ancestor of the other. When the order is relevant, use\n |          function `AlgHeight`.\n |\n |      .. seealso:: :func:`MTG`, :func:`Order`, :func:`Rank`, :func:`EdgeType`, :func:`AlgHeight`, :func:`AlgHeight`, :func:`AlgOrder`.\n |\n |  Index = index(self, vid)\n |\n |  Label = label(self, vid)\n |\n |  Path(self, v1, v2)\n |      List of vertices defining the path between two vertices\n |\n |      This function returns the list of vertices defining the path\n |      between two vertices that are in an ancestor relationship.\n |      The vertex `v1` must be an ancestor of vertex `v2`.\n |      Otherwise, if both vertices are valid, then the empty array is returned\n |      and if at least one vertex is undefined, None is returned.\n |\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Path(v1, v2)\n |\n |      :Parameters:\n |\n |          - `v1` (int) : vertex of the active MTG\n |          - `v2` (int) : vertex of the active MTG\n |\n |      :Returns:\n |\n |          list of vertices's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; v # print the value of v\n |          78\n |          &gt;&gt;&gt; g.Ancestors(v)\n |          [78,45,32,10,4]\n |          &gt;&gt;&gt; g.Path(10,v)\n |          [10,32,45,78]\n |          &gt;&gt;&gt; g.Path(9,v) # 9 is not an ancestor of 78\n |          []\n |\n |      .. note:: `v1` can be equal to `v2`.\n |\n |      .. image:: ../user/mtg_path.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Axis`, :func:`Ancestors`.\n |\n |  Predecessor(self, v, **kwds)\n |      Father of a vertex connected to it by a '&lt;' edge\n |\n |      This function is equivalent to Father(v, EdgeType-&gt; '&lt;').\n |      It thus returns the father (at the same scale) of the argument\n |      if it is located in the same botanical.\n |      If it does not exist, None is returned.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Predecessor(v)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. `Father`\n |          - ContainedIn (int): cf. `Father`\n |\n |      :Returns:\n |\n |          return the vertex id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; Predecessor(v)\n |          7\n |          &gt;&gt;&gt; Father(v, EdgeType='+')\n |          &gt;&gt;&gt; Father(v, EdgeType-&gt; '&lt;')\n |          7\n |\n |      .. seealso:: :func:`MTG`, :func:`Father`, :func:`Successor`.\n |\n |  Rank(self, v1, v2=None)\n |      Rank of one vertex with respect to another one.\n |\n |      This function returns the number of consecutive '&lt;'-type edges between two components,\n |      at the same scale, and does not take into account the order of vertices v1 and v2.\n |      The result is a non negative integer.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Rank(v1)\n |          Rank(v1, v2)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG\n |          - v2 (int) : vertex of the active MTG\n |\n |      :Returns:\n |\n |          `int`\n |\n |          If v1 is not an ancestor of v2 (or vise versa) within the same botanical axis,\n |          or if v1 and v2 are not defined at the same scale, an error value Undef id returned.\n |\n |      .. seealso:: :func:`MTG`, :func:`Order`, :func:`Height`, :func:`EdgeType`, :func:`AlgRank`, :func:`AlgHeight`, :func:`AlgOrder`.\n |\n |  Root(self, v, RestrictedTo='*', ContainedIn=None)\n |      Root of the branching system containing a vertex\n |\n |      This function is equivalent to Ancestors(v, EdgeType='&lt;')[-1].\n |      It thus returns the root of the branching system containing the argument.\n |      This function never returns None.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Root(v)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. Father\n |          - ContainedIn (int): cf. Father\n |\n |      :Returns:\n |\n |         return vertex's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; g.Ancestors(v) # set of ancestors of v\n |          [102,78,35,33,24,12]\n |          &gt;&gt;&gt; g.Root(v) # root of the branching system containing v\n |          12\n |\n |      .. image:: ../user/mtg_root.png\n |\n |      .. seealso:: :func:`MTG`, :func:`Extremities`.\n |\n |  Scale = scale(self, vid)\n |\n |  Sons(self, v, RestrictedTo='NoRestriction', EdgeType='*', Scale=-1, ContainedIn=None)\n |      Set of vertices born or preceded by a vertex\n |\n |      The set of sons of a given vertex is returned as an array of vertices.\n |      The order of the vertices in the array is not significant.\n |      The array can be empty if there are no son vertices.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Sons(v)\n |          g.Sons(v, EdgeType= '+')\n |          g.Sons(v, Scale= 3)\n |\n |      :Parameters:\n |\n |          - v (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str) : cf. :meth:`Father`\n |          - ContainedIn (int) : cf. :meth:`Father`\n |          - EdgeType (str) : filter on the type of sons.\n |          - Scale (int) : set the scale at which sons are considered.\n |\n |      :Returns:\n |\n |          list(vid)\n |\n |      :Details:\n |\n |          When the option EdgeType is applied, the function returns the set of sons\n |          that are connected to the argument with the specified type of relation.\n |\n |      .. note:: `Sons(v, EdgeType= '&lt;')` is not equivalent to `Successor(v)`.\n |          The first function returns an array of vertices while the second function\n |          returns a vertex.\n |\n |          The returned vertices have the same scale as the argument.\n |          However, coarser or finer vertices can be obtained by specifying\n |          the optional argument `Scale` at which the sons are considered.\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; g.Sons(v)\n |          [3,45,47,78,102]\n |          &gt;&gt;&gt;  g.Sons(v, EdgeType= '+') # set of vertices borne by v\n |          [3,45,47,102]\n |          &gt;&gt;&gt;  g.Sons(v, EdgeType= '&lt;') # set of successors of v on the same axis\n |          [78]\n |\n |      .. seealso:: :func:`MTG`, :func:`Father`, :func:`Successor`, :func:`Descendants`.\n |\n |  Successor(self, v, RestrictedTo='NoRestriction', ContainedIn=None)\n |      Vertex that is connected to a given vertex by a '&lt;' edge type (i.e. in the same botanical axis).\n |\n |      This function is equivalent to Sons(v, EdgeType='&lt;')[0].\n |      It returns the vertex that is connected to a given vertex by a '&lt;' edge type\n |      (i.e. in the same botanical axis).\n |      If many such vertices exist, an arbitrary one is returned by the function.\n |      If no such vertex exists, None is returned.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.Successor(v)\n |\n |      :Parameters:\n |\n |          - v1 (int) : vertex of the active MTG\n |\n |      :Optional Parameters:\n |\n |          - RestrictedTo (str): cf. Father\n |          - ContainedIn (int): cf. Father\n |\n |      :Returns:\n |\n |          Returns vertex's id (int)\n |\n |\n |      :Examples:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; g.Sons(v)\n |          [3, 45, 47, 78, 102]\n |          &gt;&gt;&gt; g.Sons(v, EdgeType='+') # set of vertices borne by v\n |          [3, 45, 47, 102]\n |          &gt;&gt;&gt; g.Sons(v, EdgeType-&gt; '&lt;') # set of successors of v\n |          [78]\n |          &gt;&gt;&gt; g.Successor(v)\n |          78\n |\n |      .. seealso:: :func:`MTG`, :func:`Sons`, :func:`Predecessor`.\n |\n |  Trunk(self, v, Scale=-1)\n |      List of vertices constituting the bearing botanical axis of a branching system.\n |\n |      Trunk returns the list of vertices representing the botanical axis defined as\n |      the bearing axis of the whole branching system defined by `v`.\n |      The optional argument enables the user to choose the scale at which the trunk should be detailed.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          Trunk(v)\n |          Trunk(v, Scale= s)\n |\n |      :Parameters:\n |\n |          - `v` (int) : Vertex of the active MTG.\n |\n |      :Optional Parameters:\n |\n |          - `Scale` (str): scale at which the axis components are required.\n |\n |      :Returns:\n |\n |          list of vertices ids\n |\n |      .. todo:: check the usage of the optional argument Scale\n |\n |      .. seealso:: :func:`MTG`, :func:`Path`, :func:`Ancestors`, :func:`Axis`.\n |\n |  VtxList(self, Scale=-1)\n |      Array of vertices contained in a MTG\n |\n |      The set of all vertices in the :func:`MTG` is returned as an array.\n |      Vertices from all scales are returned if no option is used.\n |      The order of the elements in this array is not significant.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; VtxList()\n |          &gt;&gt;&gt; VtxList(Scale=2)\n |\n |      :Optional Parameters:\n |\n |          - `Scale` (int): used to select components at a particular scale.\n |\n |      :Returns:\n |\n |          - list of vid\n |\n |      :Background:\n |\n |          :func:`MTGs`\n |\n |      .. seealso:: :meth:`MTG`, :meth:`scale`, :meth:`Class`, :meth:`index`.\n |\n |  __contains__(self, vid)\n |      Container interface\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          if v in g:\n |              print v, \" is in the mtg.\"\n |\n |  __getitem__(self, vtx_id)\n |      A simple getitem to extract relevant information on a vertex.\n |\n |  __init__(self, filename='', has_date=False)\n |      Create a new MTG object.\n |\n |      :Usage:\n |\n |          &gt;&gt;&gt; g = MTG()\n |          &gt;&gt;&gt; g = MTG('my_mtg.mtg')\n |\n |  __iter__(self)\n |      Iterable interface.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          for v in g:\n |              print g.class_name(v)\n |\n |  __str__(self)\n |      Return str(self).\n |\n |  add_child(self, parent, child=None, **properties)\n |      Add a child to a parent. Child is appended to the parent's child list.\n |\n |      :Parameters:\n |       - `parent` (int) - The parent identifier.\n |       - `child`  (int or None) - The child identifier. If None,\n |                  an ID is generated.\n |\n |      :Returns:\n |          Identifier of the inserted vertex (child)\n |      :Returns Type:\n |          int\n |\n |  add_child_and_complex(self, parent, child=None, complex=None, **properties)\n |      Add a child at the end of children that belong to an other complex.\n |\n |      :Parameters:\n |       - `parent`: The parent identifier.\n |       - `child`: Set the child identifier to this value if defined.\n |       - `complex`: Set the complex identifier to this value if defined.\n |      :returns: (vid, vid): child and complex ids.\n |\n |  add_component(self, complex_id, component_id=None, **properties)\n |      Add a component at the end of the components\n |\n |      :Parameters:\n |       - `complex_id`: The complex identifier.\n |       - `component_id`: Set the component identifier to this value if defined.\n |\n |      :Returns: The id of the new component or the component_id if given.\n |\n |  add_element(self, parent_id, edge_type='/', scale_id=None)\n |      Add an element to the graph, if vid is not provided create a new vid ???\n |      .. warning: Not Implemented.\n |\n |      :Parameters:\n |      - `parent_id` (int) - The id of the parent vertex\n |      - `edge_type` (str) - The type of relation:\n |          - \"/\" : component (default)\n |          - \"+\" : branch\n |          - \"&lt;\" : successor.\n |      - `scale_id` (int)  - The id of the scale in which to\n |          add the vertex.\n |\n |      :Returns:\n |          The vid of the created vertex\n |\n |  class_name(self, vid)\n |      Class of a vertex.\n |\n |      The Class of a vertex are the first characters of the label.\n |      The label of a vertex is the string defined by the concatenation\n |      of the class and its index.\n |\n |      The label thus provides general information about a vertex and\n |      enable to encode the plant components.\n |\n |      The class_name may be not defined. Then, an empty string is returned.\n |\n |      :Usage:\n |\n |          &gt;&gt;&gt; g.class_name(1)\n |\n |      :Parameters:\n |\n |          - `vid` (int)\n |\n |      :Returns:\n |          The class name of the vertex (str).\n |\n |      .. seealso:: :func:`MTG`, :func:`openalea.mtg.aml.Index`, :func:`openalea.mtg.aml.Class`\n |\n |  clear(self)\n |      Remove all vertices and edges from the MTG.\n |\n |      This also removes all vertex properties.\n |      Don't change references to object such as internal dictionaries.\n |\n |      :Example:\n |          .. code-block:: python\n |\n |              &gt;&gt;&gt; g.clear()\n |              &gt;&gt;&gt; g.nb_vertices()\n |              0\n |              &gt;&gt;&gt; len(g)\n |              0\n |\n |  clear_properties(self, exclude=[])\n |      Remove all the properties of the MTG.\n |\n |      :Example:\n |          .. code-block:: python\n |\n |              &gt;&gt;&gt; g.clear_properties()\n |\n |  complex(self, vtx_id)\n |      Returns the complex of `vtx_id`.\n |\n |      :Parameters:\n |       - `vtx_id` (int) - The vertex identifier.\n |\n |      :Returns:\n |          complex identifier or None if vtx_id has no parent.\n |      :Return Type:\n |          int\n |\n |  complex_at_scale(self, vtx_id, scale)\n |      Returns the complex of `vtx_id` at scale `scale`.\n |\n |      :Parameters:\n |       - `vtx_id`: The vertex identifier.\n |       - `scale`: The scale identifier.\n |\n |      :returns:\n |          vertex identifier\n |      :Returns Type:\n |          int\n |\n |  component_roots(self, vtx_id)\n |      Return the set of roots of the tree graphs that compose a vertex.\n |\n |  component_roots_at_scale(self, vtx_id, scale)\n |      Return the list of roots of the tree graphs that compose a vertex.\n |\n |  component_roots_at_scale_iter(self, vtx_id, scale)\n |      Return the set of roots of the tree graphs that compose a vertex.\n |\n |  component_roots_iter(self, vtx_id)\n |      Return an iterator of the roots of the tree graphs that compose a vertex.\n |\n |  components(self, vid)\n |      returns the components of a vertex\n |\n |      :param vid: The vertex identifier.\n |\n |      :returns: list of vertex identifier\n |\n |  components_at_scale(self, vid, scale)\n |      returns a vertex iterator\n |\n |      :Parameters:\n |       - `vid`: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  components_at_scale_iter(self, vid, scale)\n |      returns a vertex iterator\n |\n |      :Parameters:\n |       - `vid`: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  components_iter(self, vid)\n |      returns a vertex iterator\n |\n |      :param vid: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  copy(self)\n |      Return a copy of the graph.\n |\n |      :Returns:\n |          - `g` (MTG) - A copy of the MTG\n |\n |  display(self, max_scale=0, display_id=True, display_scale=False, nb_tab=12, **kwds)\n |      Print an MTG on the console.\n |\n |      :Optional Parameters:\n |          - `max_scale`: do not print vertices of scale greater than max_scale\n |          - `display_id`: display the vid of the vertices\n |          - `display_scale`: display the scale of the vertices\n |          - `nb_tab`: display the MTG using nb_tab columns\n |\n |  edge_type(self, vid)\n |      Type of the edge between a vertex and its parent.\n |\n |      The different values are '&lt;' for successor, and '+' for ramification.\n |\n |  edges(self, scale=-1)\n |      :Parameters:\n |       - `scale` (int) - Scale at which to iterate.\n |      :Returns:\n |          Iterator on the edges of the MTG at a given scale\n |          or on all edges if scale &lt; 0.\n |      :Returns Type:\n |          iter\n |\n |  has_vertex(self, vid)\n |      Tests whether a vertex belongs to the graph.\n |\n |      :Parameters:\n |       - `vid` (int) - vertex id to test\n |      :Returns Type:\n |          bool\n |\n |  index(self, vid)\n |      Index of a vertex\n |\n |      The Index of a vertex is a feature always defined and independent of time\n |      (like the index).\n |      It is represented by a non negative integer.\n |      The label of a vertex is the string defined by the concatenation\n |      of its class and its index.\n |      The label thus provides general information about a vertex and\n |      enables us to encode the plant components.\n |\n |  insert_parent(self, vtx_id, parent_id=None, **properties)\n |      Insert parent_id between vtx_id and its actual parent.\n |      Inherit of the complex of the parent of vtx_id.\n |\n |      :Parameters:\n |       - `vtx_id` (int): a vertex identifier\n |       - `parent_id` (int): a vertex identifier\n |\n |      :Returns:\n |          Identifier of the inserted vertex (parent_id).\n |      :Returns Type:\n |          int\n |\n |  insert_scale(self, inf_scale=None, partition=None, default_label=None, preserve_order=True)\n |      Add a scale to MTG\n |\n |      :Parameters:\n |      - `inf_scale` (int) - New scale is inserted between inf_scale and inf_scale-1\n |      - `partition` (lambda v: bool) - Function defining new scale by quotienting vertices at inf_scale\n |      - `default_label` (str) - default label of inserted vertices\n |      - `preserve_order` (bool) - True iif children at new scale are ordered consistently\n |          with children at inf_scale\n |\n |      :Returns:\n |          MTG with inserted scale\n |\n |      :Remark:\n |          - New scale is inserted in self as well.\n |          - function partition should return True at roots of subtrees where partition changes\n |          and False elsewhere.\n |\n |  insert_sibling(self, vtx_id1, vtx_id2=None, **properties)\n |      Insert a sibling of vtk_id1. The vertex in inserted before vtx_id1.\n |\n |      :Parameters:\n |       - `vtx_id1` (int) : a vertex identifier\n |       - `vtx_id2` (int) : the vertex to insert\n |\n |      :Returns:\n |          Identifier of the inserted vertex (vtx_id2)\n |      :Returns Type:\n |          int\n |\n |  is_valid(self)\n |      Tests the validity of the graph. Currently\n |      always returns True.\n |\n |      :Returns Type:\n |          bool\n |      :todo: Implement this function.\n |\n |  iter_edges(self, scale=-1)\n |      :Parameters:\n |       - `scale` (int) - Scale at which to iterate.\n |      :Returns:\n |          Iterator on the edges of the MTG at a given scale\n |          or on all edges if scale &lt; 0.\n |      :Returns Type:\n |          iter\n |\n |  iteredges(self, scale=-1)\n |      Iter on the edges of the tree.\n |\n |  label(self, vid)\n |      Label of a vertex.\n |\n |      :Usage:\n |\n |          &gt;&gt;&gt; g.label(v)\n |\n |      :Parameters:\n |          - `vid` (int) : vertex of the MTG\n |\n |      :Returns:\n |          The class and Index of the vertex (str).\n |\n |      .. seealso:: :func:`MTG`, :func:`index`, :func:`class_name`\n |\n |  max_scale(self)\n |      Return the max scale identifier.\n |\n |      By convention, the mtg contains scales in :math:`[0,max\\_scale]`.\n |\n |      :Usage:\n |          &gt;&gt;&gt; print g.max_scale()\n |\n |      :Returns:\n |          S, the maximum scale identifier.\n |\n |      .. note:: The complexity is :math:`O(n)`.\n |      .. seealso:: :func:`scale`, :func:`scales`\n |\n |  nb_components(self, vid)\n |      returns the number of components\n |\n |      :Parameters:\n |       - `vid`: The vertex identifier.\n |\n |      :returns: int\n |\n |  nb_scales(self)\n |      :Returns:\n |          The number of scales defined in the mtg..\n |      :Returns Type:\n |          int\n |\n |      .. note:: The complexity is :math:`O(n)`.\n |\n |  nb_vertices(self, scale=-1)\n |      Returns the number of vertices.\n |\n |      :Usage:\n |          &gt;&gt;&gt; g.nb_vertices()\n |          100\n |          &gt;&gt;&gt; g.nb_vertices(scale=3)\n |          68\n |\n |      :Parameters:\n |       - `scale` (int) - Id of scale for which to count\n |         vertices.\n |\n |      :Returns:\n |          Number of vertices at `scale` or total\n |          number of vertices if scale &lt; 0.\n |\n |  node(self, vid, klass=None)\n |      Return a node associated to the vertex `vid`.\n |\n |      It allows to access to the properties with an object oriented interface.\n |\n |      :Example:\n |\n |      .. code-block:: python\n |\n |          node = g.node(1)\n |          print node.edge_type\n |          print node.label\n |          node.label = 'B'\n |          print g.label(1)\n |\n |          print node.parent\n |          print list(node.children)\n |\n |  order(self, v1)\n |      Order of a vertex in a graph.\n |\n |      The order of a vertex in a graph is the number of '+' edges crossed\n |      when going from `v1`to `v2`.\n |\n |      If v2 is None, the order of v1 correspond to the order of v1 with\n |      respect to the root.\n |\n |  plot_property(self, prop, **kwds)\n |      Plot properties of MTG using matplotlib\n |\n |      :Example:\n |\n |          &gt;&gt;&gt; g.plot_property('length')\n |\n |  reindex(self, mapping=None, copy=False)\n |      Assign a new identifier to each vertex.\n |\n |      This method assigns a new identifier to each vertex of the MTG. The mapping can be user defined or\n |      is implicit (`mapping`). This method modify the MTG in place or return a new MTG (`copy`).\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          &gt;&gt;&gt; g.reindex()\n |          &gt;&gt;&gt; g1 = g.reindex(copy=True)\n |          &gt;&gt;&gt; mymap = dict(zip(list(traversal.iter_mtg2(g,g.root)), range(len(g))))\n |          &gt;&gt;&gt; g2 = g.reindex(mapping=mymap, copy=True)\n |\n |      :Optional Parameters:\n |\n |          - `mapping` (dict): define a mapping between old and new vertex identifiers.\n |          - `copy` (bool) : modify the object in place or return a new MTG.\n |\n |      :Returns:\n |\n |          - a MTG\n |\n |      :Background:\n |\n |          :func:`MTGs`\n |\n |      .. seealso:: :meth:`sub_mtg`\n |\n |  remove_scale(self, scale)\n |      Remove all the vertices at a given scale.\n |\n |      The upper and lower scale are then connected.\n |\n |      Parameters:\n |      ===========\n |          - scale : the scale that have to be removed\n |\n |      Returns\n |      =======\n |          - g : the input MTG modified in place.\n |          - results : a list of dict\n |              all the vertices that have been removed\n |\n |  remove_vertex(self, vid, reparent_child=False)\n |      Remove a specified vertex of the graph and\n |      remove all the edges attached to it.\n |\n |      :Parameters:\n |          - `vid` (int) : the id of the vertex to remove\n |          - `reparent_child` (bool) : reparent the children of `vid` to its parent.\n |      :Returns: None\n |\n |  replace_parent(self, vtx_id, new_parent_id, **properties)\n |      Change the parent of vtx_id to new_parent_id.\n |      The new parent of vtx_id is new_parent_id.\n |      vtx_id and new_parent_id must have the same scale.\n |\n |      This function do not change the edge_type between vtx_id and its parent.\n |\n |      Inherit of the complex of the parent of vtx_id.\n |\n |      :Parameters:\n |       - `vtx_id` (int): a vertex identifier\n |       - `new_parent_id` (int): a vertex identifier\n |\n |      :Returns:\n |          None\n |\n |  roots(self, scale=0)\n |      Returns a list of the roots of the tree graphs at a given scale.\n |\n |      In an MTG, the MTG root vertex, namely the vertex `g.root`,\n |      can be decomposed into several, non-connected, tree graphs at a given scale.\n |      This is for example the case of an MTG containing the description of several plants.\n |\n |      :Usage: ::\n |\n |          roots = g.roots(scale=g.max_scale()\n |\n |      :Returns:\n |          list on vertex identifiers of root vertices at a given `scale`.\n |      :Returns Type:\n |          list of vid\n |\n |      .. image:: ../user/mtg_componentroots.png\n |\n |  roots_iter(self, scale=0)\n |      Returns an iterator of the roots of the tree graphs at a given scale.\n |\n |      In an MTG, the MTG root vertex, namely the vertex `g.root`,\n |      can be decomposed into several, non-connected, tree graphs at a given scale.\n |      This is for example the case of an MTG containing the description of several plants.\n |\n |      :Usage: ::\n |\n |          roots = list(g.roots(scale=g.max_scale())\n |\n |      :Returns:\n |          iterator on vertex identifiers of root vertices at a given `scale`.\n |      :Returns Type:\n |          iter\n |\n |      .. image:: ../user/mtg_componentroots.png\n |\n |  scale(self, vid)\n |      Returns the scale of a vertex.\n |\n |      All vertices should belong to a given scale.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g.scale(vid)\n |\n |      :Parameters:\n |\n |          - `vid` (int) - vertex identifier.\n |\n |      :Returns:\n |          The scale of the vertex.\n |          It is a positive int in [0,g.max_scale()].\n |\n |  scales(self)\n |      Return the different scales of the mtg.\n |\n |      :Returns:\n |          Iterator on scale identifiers (ints).\n |\n |      .. note:: The complexity is :math:`O(n)`.\n |\n |  scales_iter(self)\n |      Return the different scales of the mtg.\n |\n |      :Returns:\n |          Iterator on scale identifiers (ints).\n |\n |      .. note:: The complexity is :math:`O(n)`.\n |\n |  sub_mtg(self, vtx_id, copy=True)\n |      Return the submtg rooted on `vtx_id`.\n |\n |      The induced sub mtg of the mtg are all the vertices which have vtx_id\n |      has a complex plus vtx_id.\n |\n |      :Parameters:\n |        - `vtx_id`: A vertex of the original tree.\n |        - `copy`:\n |          If True, return a new tree holding the subtree. If False, the subtree is\n |          created using the original tree by deleting all vertices not in the subtree.\n |\n |      :returns: A sub mtg of the mtg. If copy=True, a new MTG is returned.\n |          Else the sub mtg is created inplace by modifying the original tree.\n |\n |  vertices(self, scale=-1)\n |      Return a list of the vertices contained in an MTG.\n |\n |      The set of all vertices in the MTG is returned.\n |      Vertices from all scales are returned if no scale is given.\n |      Otherwise, it returns only the vertices of the given scale.\n |      The order of the elements in this array is not significant.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g = MTG()\n |          len(g) == len(list(g.vertices()))\n |          for vid in g.vertices(scale=2):\n |              print g.class_name(vid)\n |\n |      :Optional Parameters:\n |          - `scale` (int): used to select vertices at a given scale.\n |\n |      :Returns:\n |          Iterator on vertices at \"scale\" or on all\n |          vertices if scale &lt; 0.\n |\n |      :Returns Type:\n |          list of vid\n |\n |      :Background:\n |\n |      .. seealso:: :meth:`children`, :meth:`components`, :meth:`vertices_iter`..\n |\n |  vertices_iter(self, scale=-1)\n |      Return an iterator of the vertices contained in an MTG.\n |\n |      The set of all vertices in the MTG is returned.\n |      Vertices from all scales are returned if no scale is given.\n |      Otherwise, it returns only the vertices of the given scale.\n |      The order of the elements in this array is not significant.\n |\n |      :Usage:\n |\n |      .. code-block:: python\n |\n |          g = MTG()\n |          len(g) == len(list(g.vertices()))\n |          for vid in g.vertices(scale=2):\n |              print g.class_name(vid)\n |\n |      :Optional Parameters:\n |          - `scale` (int): used to select vertices at a given scale.\n |\n |      :Returns:\n |          Iterator on vertices at \"scale\" or on all\n |          vertices if scale &lt; 0.\n |\n |      :Returns Type:\n |          iter of vid\n |\n |      :Background:\n |\n |      .. seealso:: :meth:`children`, :meth:`components`.\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from openalea.mtg.tree.PropertyTree:\n |\n |  add_child_tree(self, parent, tree)\n |      Add a tree after the children of the parent vertex.\n |      Complexity have to be O(1) if tree == sub_tree()\n |\n |      :param parent: vertex identifier\n |      :param tree: a rooted tree\n |\n |  add_property(self, property_name)\n |      Add a new map between vid and a data\n |      Do not fill this property for any vertex\n |\n |  get_vertex_property(self, vid)\n |      Returns all the properties defined on a vertex.\n |\n |  graph_properties(self)\n |      return a dict containing the graph properties/\n |\n |      :rtype: dict of ``{property_name:data}``\n |\n |  insert_sibling_tree(self, vid, tree)\n |      Insert a tree before the vid.\n |      vid and the root of the tree are siblings.\n |      Complexity have to be O(1) if tree comes from the actual tree\n |      ( tree= self.sub_tree() )\n |\n |      :param vid: vertex identifier\n |      :param tree: a rooted tree\n |\n |  properties(self)\n |      Returns all the property maps contain in the graph.\n |\n |  property(self, name)\n |      Returns the property map between the vid and the data.\n |      :returns:  dict of {vid:data}\n |\n |  property_names(self)\n |      names of all property maps.\n |      Properties are defined only on vertices, even edge properties.\n |      return iter of names\n |\n |  property_names_iter(self)\n |      iter on names of all property maps.\n |      Properties are defined only on vertices, even edge properties.\n |      return iter of names\n |\n |  remove_property(self, property_name)\n |      Remove the property map called property_name from the graph.\n |\n |  remove_tree(self, vtx_id)\n |      Remove the sub tree rooted on `vtx_id`.\n |\n |      :returns: bool\n |\n |  sub_tree(self, vtx_id, copy=True)\n |      Return the subtree rooted on `vtx_id`.\n |\n |      The induced subtree of the tree has the vertices in the ancestors of vtx_id.\n |\n |      :Parameters:\n |        - `vtx_id`: A vertex of the original tree.\n |        - `copy`:\n |          If True, return a new tree holding the subtree. If False, the subtree is\n |          created using the original tree by deleting all vertices not in the subtree.\n |\n |      :returns: A sub tree of the tree. If copy=True, a new Tree is returned.\n |          Else the subtree is created inplace by modifying the original tree.\n |\n |  ----------------------------------------------------------------------\n |  Methods inherited from openalea.mtg.tree.Tree:\n |\n |  __len__(self)\n |\n |  children(self, vtx_id)\n |      returns a vertex iterator\n |\n |      :param vtx_id: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  children_iter(self, vtx_id)\n |      returns a vertex iterator\n |\n |      :param vtx_id: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  get_root(self)\n |      Return the tree root.\n |\n |      :return: vertex identifier\n |\n |  is_leaf(self, vtx_id)\n |      Test if `vtx_id` is a leaf.\n |\n |      :returns: bool\n |\n |  nb_children(self, vtx_id)\n |      returns the number of children\n |\n |      :Parameters:\n |       - `vtx_id`: The vertex identifier.\n |\n |      :returns: int\n |\n |  nb_siblings(self, vtx_id)\n |      returns the number of siblings\n |\n |      :returns: int\n |\n |  parent(self, vtx_id)\n |      Return the parent of `vtx_id`.\n |\n |      :Parameters:\n |       - `vtx_id`: The vertex identifier.\n |\n |      :returns: vertex identifier\n |\n |  set_root(self, vtx_id)\n |      Set the tree root.\n |\n |      :param vtx_id: The vertex identifier.\n |\n |  siblings(self, vtx_id)\n |      returns an iterator of vtx_id siblings.\n |      vtx_id is not include in siblings.\n |\n |      :Parameters:\n |       - `vtx_id`: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  siblings_iter(self, vtx_id)\n |      returns an iterator of vtx_id siblings.\n |      vtx_id is not include in siblings.\n |\n |      :Parameters:\n |       - `vtx_id`: The vertex identifier.\n |\n |      :returns: iter of vertex identifier\n |\n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from openalea.mtg.tree.Tree:\n |\n |  __dict__\n |      dictionary for instance variables\n |\n |  __weakref__\n |      list of weak references to the object\n |\n |  root\n |      Return the tree root.\n |\n |      :return: vertex identifier\n\n\n\n\n\nCode\ng.vertices()\n\n\n[0,\n 1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46]\n\n\n\n\nCode\nfor id in g.vertices():\n    print(g[id])\n\n\n{'vid': 0, 'index': 0, 'complex': None, 'parent': None, 'scale': 0}\n{'edge_type': '/', 'label': 'Plant', 'vid': 1, 'index': 1, 'complex': 0, 'parent': None, 'scale': 1}\n{'edge_type': '/', 'label': 'MainAxis', 'vid': 2, 'index': 2, 'complex': 1, 'parent': None, 'scale': 2}\n{'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 0.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DBD0&gt;, 'anchor_point': Vector3(0,0,0), 'vid': 3, 'index': 3, 'complex': 2, 'parent': None, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 0.9511930974888486, 'visible_length': 0.9511930974888486, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 0.9511930974888486, 'leaf_area': 0.08142914778393873, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.11414317169866182, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DCB0&gt;, 'anchor_point': Vector3(0,0,2), 'vid': 4, 'index': 4, 'complex': 2, 'parent': 3, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DE00&gt;, 'anchor_point': Vector3(0,0,2), 'vid': 5, 'index': 5, 'complex': 2, 'parent': 3, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 1.9059330852612248, 'visible_length': 1.9059330852612248, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 1.9059330852612248, 'leaf_area': 0.32693228329440344, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.22871197023134698, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DE70&gt;, 'anchor_point': Vector3(0,0,4), 'vid': 6, 'index': 6, 'complex': 2, 'parent': 5, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DEE0&gt;, 'anchor_point': Vector3(0,0,4), 'vid': 7, 'index': 7, 'complex': 2, 'parent': 5, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 4.203195281771148, 'visible_length': 4.203195281771148, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 4.203195281771148, 'leaf_area': 1.5900165519032914, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 0.5043834338125377, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DF50&gt;, 'anchor_point': Vector3(0,0,6), 'vid': 8, 'index': 8, 'complex': 2, 'parent': 7, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3DFC0&gt;, 'anchor_point': Vector3(0,0,6), 'vid': 9, 'index': 9, 'complex': 2, 'parent': 7, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 8.83557884827753, 'visible_length': 8.83557884827753, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 8.83557884827753, 'leaf_area': 7.0260708225716355, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 1.0602694617933035, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E030&gt;, 'anchor_point': Vector3(0,0,8), 'vid': 10, 'index': 10, 'complex': 2, 'parent': 9, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.0, 'length': 2.0, 'visible_length': 2.0, 'is_green': True, 'diameter': 2.5, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E0A0&gt;, 'anchor_point': Vector3(0,0,8), 'vid': 11, 'index': 11, 'complex': 2, 'parent': 9, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 15.332907866380747, 'visible_length': 15.332907866380747, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 15.332907866380747, 'leaf_area': 21.15882572750285, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 1.8399489439656895, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E180&gt;, 'anchor_point': Vector3(0,0,10), 'vid': 12, 'index': 12, 'complex': 2, 'parent': 11, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 2.352941176470587, 'length': 2.352941176470587, 'visible_length': 2.352941176470587, 'is_green': True, 'diameter': 2.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E110&gt;, 'anchor_point': Vector3(0,0,10), 'vid': 13, 'index': 13, 'complex': 2, 'parent': 11, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 19.02386194977697, 'visible_length': 19.02386194977697, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 19.02386194977697, 'leaf_area': 32.57165911357548, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 2.2828634339732363, 'stem_diameter': 2.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E1F0&gt;, 'anchor_point': Vector3(0,0,12.3529), 'vid': 14, 'index': 14, 'complex': 2, 'parent': 13, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470587, 'length': 12.352941176470587, 'visible_length': 12.352941176470587, 'is_green': True, 'diameter': 2.375, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E2D0&gt;, 'anchor_point': Vector3(0,0,12.3529), 'vid': 15, 'index': 15, 'complex': 2, 'parent': 13, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 23.967297224216356, 'visible_length': 23.967297224216356, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 23.967297224216356, 'leaf_area': 51.69882026105361, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 2.8760756669059626, 'stem_diameter': 2.375, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E340&gt;, 'anchor_point': Vector3(0,0,24.7059), 'vid': 16, 'index': 16, 'complex': 2, 'parent': 15, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 2.25, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E260&gt;, 'anchor_point': Vector3(0,0,24.7059), 'vid': 17, 'index': 17, 'complex': 2, 'parent': 15, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 29.981386234328838, 'visible_length': 29.981386234328838, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 29.981386234328838, 'leaf_area': 80.89951684788024, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 3.5977663481194604, 'stem_diameter': 2.25, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E3B0&gt;, 'anchor_point': Vector3(0,0,37.0588), 'vid': 18, 'index': 18, 'complex': 2, 'parent': 17, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 2.125, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E420&gt;, 'anchor_point': Vector3(0,0,37.0588), 'vid': 19, 'index': 19, 'complex': 2, 'parent': 17, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 37.102890598360794, 'visible_length': 37.102890598360794, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 37.102890598360794, 'leaf_area': 123.89620416785367, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 4.452346871803295, 'stem_diameter': 2.125, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E490&gt;, 'anchor_point': Vector3(0,0,49.4118), 'vid': 20, 'index': 20, 'complex': 2, 'parent': 19, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 2.0, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E500&gt;, 'anchor_point': Vector3(0,0,49.4118), 'vid': 21, 'index': 21, 'complex': 2, 'parent': 19, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 45.25830541217596, 'visible_length': 45.25830541217596, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 45.25830541217596, 'leaf_area': 184.3482787903616, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 5.430996649461115, 'stem_diameter': 2.0, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E5E0&gt;, 'anchor_point': Vector3(0,0,61.7647), 'vid': 22, 'index': 22, 'complex': 2, 'parent': 21, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470594, 'length': 12.352941176470594, 'visible_length': 12.352941176470594, 'is_green': True, 'diameter': 1.875, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E650&gt;, 'anchor_point': Vector3(0,0,61.7647), 'vid': 23, 'index': 23, 'complex': 2, 'parent': 21, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 54.21687176025305, 'visible_length': 54.21687176025305, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 54.21687176025305, 'leaf_area': 264.5522265120952, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 6.506024611230366, 'stem_diameter': 1.875, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E570&gt;, 'anchor_point': Vector3(0,0,74.1176), 'vid': 24, 'index': 24, 'complex': 2, 'parent': 23, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.75, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E6C0&gt;, 'anchor_point': Vector3(0,0,74.1176), 'vid': 25, 'index': 25, 'complex': 2, 'parent': 23, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 63.55172805490181, 'visible_length': 63.55172805490181, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 63.55172805490181, 'leaf_area': 363.4939924887774, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 7.626207366588217, 'stem_diameter': 1.75, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E730&gt;, 'anchor_point': Vector3(0,0,86.4706), 'vid': 26, 'index': 26, 'complex': 2, 'parent': 25, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.625, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E7A0&gt;, 'anchor_point': Vector3(0,0,86.4706), 'vid': 27, 'index': 27, 'complex': 2, 'parent': 25, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 72.62533208163514, 'visible_length': 72.62533208163514, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 72.62533208163514, 'leaf_area': 474.6994973971004, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 8.715039849796216, 'stem_diameter': 1.625, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E810&gt;, 'anchor_point': Vector3(0,0,98.8235), 'vid': 28, 'index': 28, 'complex': 2, 'parent': 27, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 1.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E880&gt;, 'anchor_point': Vector3(0,0,98.8235), 'vid': 29, 'index': 29, 'complex': 2, 'parent': 27, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 80.61723053443279, 'visible_length': 80.61723053443279, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 80.61723053443279, 'leaf_area': 584.9224073137694, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 9.674067664131934, 'stem_diameter': 1.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E8F0&gt;, 'anchor_point': Vector3(0,0,111.176), 'vid': 30, 'index': 30, 'complex': 2, 'parent': 29, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.375, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E960&gt;, 'anchor_point': Vector3(0,0,111.176), 'vid': 31, 'index': 31, 'complex': 2, 'parent': 29, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 86.60794057547501, 'visible_length': 86.60794057547501, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 86.60794057547501, 'leaf_area': 675.084183365251, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.392952869057002, 'stem_diameter': 1.375, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3E9D0&gt;, 'anchor_point': Vector3(0,0,123.529), 'vid': 32, 'index': 32, 'complex': 2, 'parent': 31, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.25, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EA40&gt;, 'anchor_point': Vector3(0,0,123.529), 'vid': 33, 'index': 33, 'complex': 2, 'parent': 31, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 89.71989570308179, 'visible_length': 89.71989570308179, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 89.71989570308179, 'leaf_area': 724.4693716474686, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.766387484369814, 'stem_diameter': 1.25, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EAB0&gt;, 'anchor_point': Vector3(0,0,135.882), 'vid': 34, 'index': 34, 'complex': 2, 'parent': 33, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 1.125, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EB20&gt;, 'anchor_point': Vector3(0,0,135.882), 'vid': 35, 'index': 35, 'complex': 2, 'parent': 33, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 89.29602709763027, 'visible_length': 89.29602709763027, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 89.29602709763027, 'leaf_area': 717.6402409878648, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.715523251715632, 'stem_diameter': 1.125, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EB90&gt;, 'anchor_point': Vector3(0,0,148.235), 'vid': 36, 'index': 36, 'complex': 2, 'parent': 35, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 1.0, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EC00&gt;, 'anchor_point': Vector3(0,0,148.235), 'vid': 37, 'index': 37, 'complex': 2, 'parent': 35, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 85.07441274901828, 'visible_length': 85.07441274901828, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 85.07441274901828, 'leaf_area': 651.3890134131291, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 10.208929529882193, 'stem_diameter': 1.0, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EC70&gt;, 'anchor_point': Vector3(0,0,160.588), 'vid': 38, 'index': 38, 'complex': 2, 'parent': 37, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.35294117647058, 'length': 12.35294117647058, 'visible_length': 12.35294117647058, 'is_green': True, 'diameter': 0.875, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3ECE0&gt;, 'anchor_point': Vector3(0,0,160.588), 'vid': 39, 'index': 39, 'complex': 2, 'parent': 37, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 77.30371162173756, 'visible_length': 77.30371162173756, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 77.30371162173756, 'leaf_area': 537.8277447447086, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 9.276445394608507, 'stem_diameter': 0.875, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3ED50&gt;, 'anchor_point': Vector3(0,0,172.941), 'vid': 40, 'index': 40, 'complex': 2, 'parent': 39, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 0.75, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EDC0&gt;, 'anchor_point': Vector3(0,0,172.941), 'vid': 41, 'index': 41, 'complex': 2, 'parent': 39, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 66.74940731793457, 'visible_length': 66.74940731793457, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 66.74940731793457, 'leaf_area': 400.9935039565983, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 8.009928878152149, 'stem_diameter': 0.75, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EE30&gt;, 'anchor_point': Vector3(0,0,185.294), 'vid': 42, 'index': 42, 'complex': 2, 'parent': 41, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470551, 'length': 12.352941176470551, 'visible_length': 12.352941176470551, 'is_green': True, 'diameter': 0.625, 'azimuth': -180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EEA0&gt;, 'anchor_point': Vector3(0,0,185.294), 'vid': 43, 'index': 43, 'complex': 2, 'parent': 41, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 54.569663998970206, 'visible_length': 54.569663998970206, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 54.569663998970206, 'leaf_area': 268.0063406064454, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 6.548359679876424, 'stem_diameter': 0.625, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EF10&gt;, 'anchor_point': Vector3(0,0,197.647), 'vid': 44, 'index': 44, 'complex': 2, 'parent': 43, 'scale': 3}\n{'edge_type': '&lt;', 'label': 'Stem', 'mature_length': 12.352941176470608, 'length': 12.352941176470608, 'visible_length': 12.352941176470608, 'is_green': True, 'diameter': 0.5, 'azimuth': 180.0, 'grow': False, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EF80&gt;, 'anchor_point': Vector3(0,0,197.647), 'vid': 45, 'index': 45, 'complex': 2, 'parent': 43, 'scale': 3}\n{'edge_type': '+', 'label': 'Leaf', 'length': 42.08458621271703, 'visible_length': 42.08458621271703, 'is_green': True, 'grow': False, 'shape': (array([0.00990483, 0.05135215, 0.08490658, 0.12522582, 0.18718874,\n       0.30925598, 0.37238227, 0.45952663, 0.55145862, 0.58912238,\n       0.64113653, 0.65280337]), array([-0.01843473,  0.11349698,  0.16756582,  0.21338825,  0.26124868,\n        0.30703271,  0.3110246 ,  0.29390919,  0.23653963,  0.19223625,\n        0.07121084, -0.00598376]), array([0.        , 0.13828904, 0.20192345, 0.26295899, 0.34125346,\n       0.47162442, 0.53487681, 0.62368603, 0.73205003, 0.79019939,\n       0.92192873, 1.        ]), array([0.73850144, 0.91417664, 0.96530623, 0.99465506, 1.00493343,\n       0.96274111, 0.91950704, 0.82854785, 0.65356785, 0.53220181,\n       0.23021259, 0.        ])), 'shape_mature_length': 42.08458621271703, 'leaf_area': 159.40011570260506, 'form_factor': 0.75, 'srb': 0, 'srt': 1, 'lrolled': 0, 'd_rolled': 0, 'shape_max_width': 5.050150345526043, 'stem_diameter': 0.5, 'geometry': &lt;openalea.plantgl.scenegraph._pglsg.TriangleSet object at 0x0000023C77D3EFF0&gt;, 'anchor_point': Vector3(0,0,210), 'vid': 46, 'index': 46, 'complex': 2, 'parent': 45, 'scale': 3}\n\n\nLet’s dig into the propreties of the MTG of a cereal shoot.\n\n\nCode\n## Imports\n\n# from installed packages\nfrom oawidgets.mtg import *\n\n\n## Code for exploring the MTG of the generated cereal shoot\n\n# Properties on the MTG: this exclude all the topological properties\nprint(g_single.property_names())\n\n# Retrieve one property for the MTG (dict)\n\nlabels = g_single.property('label')\n# print(labels)\n\ni_length = g_single.property('mature_length')\nl_length = g_single.property('shape_mature_length')\n\nleaf_lengths=[]\nleaf_ind=[]\ninternode_lengths=[]\ninternode_ind=[]\nfor k,v in i_length.items():\n    internode_ind.append(k)\n    internode_lengths.append(v)\nfor k,v in l_length.items():\n    leaf_ind.append(k)\n    leaf_lengths.append(v)\n\n\n\nplt.figure()\nplt.plot(leaf_ind, leaf_lengths, c=\"green\", label=\"Leaf lengths\") # == 'shape_mature_length' for final plant\nplt.plot(internode_ind, internode_lengths, c=\"orange\", label=\"Internode lengths\")\nplt.plot(internode_ind, np.cumsum(internode_lengths), c=\"orange\", label=\"Plant height\", ls='--')\nplt.xlabel(\"Vertices\")\nplt.ylabel(\"Lengths (cm)\")\nplt.title(\"MTG properties\")\nplt.legend()\nplt.show()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[15], line 10\n      4 from oawidgets.mtg import *\n      7 ## Code for exploring the MTG of the generated cereal shoot\n      8 \n      9 # Properties on the MTG: this exclude all the topological properties\n---&gt; 10 print(g_single.property_names())\n     12 # Retrieve one property for the MTG (dict)\n     14 labels = g_single.property('label')\n\nNameError: name 'g_single' is not defined\n\n\n\nThe leaf lengths and widths follow the bell shaped curve described before.\nThe first internode in the MTG actually corresponds to the pseudostem, i.e. the about 4 to 8 short first internodes that rapidly lose their leaves. The lengths following internodes follow the geometric model described before.\n\n\n['Plant', 'Leaf', 'Stem', 'MainAxis']\n[]\nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \n\n\n\n        \n        \n\n\n\n\n3.7.2 A cereal crop with variability\n\n\nCode\n## Imports\n\n# from installed packages\nfrom random import *\n\n# from openalea.archicrop\nfrom openalea.archicrop.stand import agronomic_plot\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating a random cereal crop from descritive parameters with variability \n# Fix a seed\n#seed(1)\n\n# Initialize the list of plants\nplants_in_crop=[]\n\n# Fixed parameters for all plants\nlength_plot=5\nwidth_plot=5\nsowing_density=10\nplant_density=5\ninter_row=0.5\nnplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, \n                                                               width_plot, \n                                                               sowing_density, \n                                                               plant_density, \n                                                               inter_row, \n                                                               noise=0.1)\n\n# For loop over all the plants in the crop\nfor n in range(nplants):\n    # Parameters varying among plants\n    height=300*(1+random()-0.5) \n    nb_phy=15\n    max_leaf_length=50*(1+random()-0.5)\n    insertion_angle=40*(1+random()-0.5)\n    scurv=0.7*(1+random()-0.5)\n    curvature=70*(1+random()-0.5)\n    phyllotactic_angle=137*(1+random()-0.5)\n\n    # Functions calls\n    shoot, g_var = build_shoot(nb_phy=nb_phy, height=height, max_leaf_length=max_leaf_length, \n                                wl=0.1, diam_base=2.5, diam_top=1.0, \n                                insertion_angle=insertion_angle, scurv=scurv, curvature=curvature, \n                                alpha=-2.3, stem_q=1.25, rmax=0.9, skew=0.2,\n                                phyllotactic_angle=phyllotactic_angle, phyllotactic_deviation=15, plant_orientation=random()*360, spiral=True)\n\n    # Fill the list of plants\n    plants_in_crop.append(g_var)\n\n# Build and display scene\nscene_var, nump = build_scene(plants_in_crop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\n# display_scene(scene_var)\nPlantGL(scene_var)\n\n\n\n\n3.7.3 An intercrop organized in rows\n\n\nCode\n## Imports\n\n# from installed packages\nfrom openalea.plantgl.all import Material, Color3, Shape, Scene, Viewer, Translated, AxisRotated\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating an intercrop from descritive parameters\n\n# Fix a seed\nseed(1)\n\ndef plant(height, nb_phy, max_leaf_length, phyllotactic_angle):\n    \"\"\" return the MTG of a cereal shoot generative from descriptive parameters \"\"\"\n    \n    shoot, g = build_shoot(nb_phy=nb_phy, height=height, max_leaf_length=max_leaf_length, phyllotactic_angle=phyllotactic_angle, plant_orientation=random()*360)\n    return g\n\n\n# Organize the plant mixture in alternate rows\nn_rows = 10\nlen_rows = 10\n\nd_inter = 70\nd_intra = 50\n\ndef plant_in_row(i):\n     if i%(4*d_inter)==0 or i%(4*d_inter)==d_inter: return plant(height=1700, nb_phy=18, max_leaf_length=100, phyllotactic_angle=137)\n     else: return plant(height=900, nb_phy=18, max_leaf_length=40, phyllotactic_angle=60)\n\n\nplants_in_intercrop = [plant_in_row(x) for x in range(0, n_rows*d_inter, d_inter) for y in range(0, len_rows*d_intra, d_intra)]\n\npositions=[(x,y,0) for x in range(0, n_rows*d_inter, d_inter) for y in range(0, len_rows*d_intra, d_intra)]\n\n# Build and display scene\nscene_ic, nump = build_scene(plants_in_intercrop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\n# display_scene(scene_ic)\nPlantGL(scene_ic)",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#tillering-branching",
    "href": "structural_cereal_model.html#tillering-branching",
    "title": "3  Structural cereal model",
    "section": "3.8 Tillering / Branching",
    "text": "3.8 Tillering / Branching\nFirst, basipetal tillers, straight, oriented according to a certain angle, appearing according to a certain timing\nParameters : number, maximal order, reduction factor, tiller appearance rate (&gt;1 phyllochron or not? several mechanisms depending on species, keep it simple at first), insertion angle (same as leaf ?), tiller curvature, condition related to density (ex: hyp sorghum im field –&gt; no tiller)\nFor the final structure: When visiting the phytomers from the base, the tillers will be allocated sequentially to the short internodes, following their age and, for a given age, following the ascending order of tiller order, in the limits of the total number of tillers and the maximal order allowed for tillers. Some geometrical features (length, stem diameter, max leaf length, etc.) will be reduced by a given reduction ratio (order-dependent ?). The angles of the tillers\nHow do we manage the leaves of the short internodes bearing tillers ? Do we consider them at all ?\nFor growth: the age (start_tt and end_tt) is determined by a tiller appearance rate, expressed as a function of the phyllochron (and the order ?)\nsee weberpenn Ecomeristem Evers Abichou",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "structural_cereal_model.html#next-steps",
    "href": "structural_cereal_model.html#next-steps",
    "title": "3  Structural cereal model",
    "section": "3.9 Next steps",
    "text": "3.9 Next steps\n\nModify leaf shape + wavy leaves ?\nAdapt for different species (parameters for cereals, some functions for legumes)",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Structural cereal model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html",
    "href": "dynamic_model.html",
    "title": "4  Dynamic model",
    "section": "",
    "text": "4.1 Conceptual diagram\nThe main stem grows according to the crop model’s plant height.\nThe appearance of a leaf is triggered by fixed phyllochron (different for tillers?).\nThe angle of the leaf with its axis is leaf-age dependent. The leaf blade curvature depends on the angle with the axis and the leaf length.\nThe reproductive organs appear from a given thermal time, when the leaves have stopped growing. Leaf senescence is constrained by crop model, as it has a direct influence on LAI (green LAI vs. yellow LAI ?).\nThe branching pattern is set (Tillers (Zhu et al., 2015)).",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#time-dependent-parametrization-of-leaf-area",
    "href": "dynamic_model.html#time-dependent-parametrization-of-leaf-area",
    "title": "4  Dynamic model",
    "section": "4.2 Time-dependent parametrization of leaf area",
    "text": "4.2 Time-dependent parametrization of leaf area\n\\[ \\mathcal{A_normalized} = 2 * \\left|\\int_{0}^{1} \\mathcal{C}(l(u))dl(u)\\right| \\] \\[ \\mathcal{A} = \\mathcal{A_scaled} = 2 * w * \\left|\\int_{0}^{L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)\\frac{dl(u)}{L}\\right| \\] \\[ \\frac{d\\mathcal{A}}{dt} = 2 * w * \\left|\\int_{dl(t)/L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)\\frac{dl(u)}{L}\\right| \\]\n\n\\(\\mathcal{A}\\) : final leaf area (or surface), in \\(cm^2\\) (given by crop model)\n\\(\\frac{d\\mathcal{A}}{dt}\\) : gain in area, in \\(cm^2\\), for a given leaf for a given time step \\(dt\\) (given by crop model)\n\n\\(\\mathcal{C}\\) : curve of the evolution of the leaf width along the leaf, from tip to base\n\\(l(t)\\) : curvilinear abscissa of the midrib, in \\(cm\\), as a function of thermal time \\(t\\), such that: $ dl(t) = $ (computed from leaf curvature)\n\\(w\\) : final maximal width of the leaf, in \\(cm\\)\n\\(L\\) : final length of the leaf, in \\(cm\\)\n\\(t\\) : thermal time, in \\(^oC.day\\)\n\nThe objective is to find, for each growing leaf, at each time step, and for a given leaf area provided to the leaf \\(\\frac{d\\mathcal{A}}{dt}\\), how much length \\(dl(t)\\) is added to the leaf.\n\\[ \\frac{d\\mathcal{A}}{dt} = 2w \\left|\\int_{l(t-1)/L}^{l(t)/L} \\mathcal{C}\\left(\\frac{l(u)}{L}\\right)d\\frac{l(u)}{L}\\right| \\]\nAccording to the Fundamental Theorem of Calculus, \\(\\mathcal{C}\\) being at least \\(C^0\\) on \\([0,L]\\), \\(F\\) being the antiderivative of \\(\\mathcal{C}\\), we can write:\n\\[ \\frac{d\\mathcal{A}}{dt} = 2w \\left|F\\left(\\frac{l(t)}{L}\\right) - F\\left(\\frac{l(t-1)}{L}\\right)\\right| \\]\n\\[ F\\left(\\frac{l(t)}{L}\\right) = \\left|\\frac{1}{2w} \\frac{d\\mathcal{A}}{dt} + F\\left(\\frac{l(t-1)}{L}\\right)\\right| \\]\nKnowing the other variables, we know have to determine \\(l(t)\\) at thermal time \\(t\\).",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#apparition-and-growth-of-phytomers-stem-and-leaf",
    "href": "dynamic_model.html#apparition-and-growth-of-phytomers-stem-and-leaf",
    "title": "4  Dynamic model",
    "section": "4.3 Apparition and growth of phytomers (stem and leaf)",
    "text": "4.3 Apparition and growth of phytomers (stem and leaf)\nThe height of the plant/canopy (here we consider the height of the main stem) is given by the crop model.\nThe plastochron (i.e. leaf initiation rate, in \\(leaf^{-1}\\)) is the time interval between two successive leaves produced at the SAM.\nThe phyllochron (i.e. leaf emergence rate, in \\(leaf^{-1}\\)) is the time interval between two successive leaves emerging from the top of the former leaf sheath.\nThe time for a leaf to grow is roughly between 1.5 and 2 phyllochrons.\nWe consider a linear (rough approximation of beta function) growth for the leaf.\n\n\\(\\phi\\) : phyllochron, in \\(^oC.day.leaf^{-1}\\) (literature)\ncur_len_int : current length of growing internodes\nfin_len_int : final length of internodes, in \\(cm\\) (literature, bell shaped model too ?)\nheight : plant height, in \\(cm\\) (given by crop model)\n\\([s(t)]\\) : current length of growing leaves, in \\(cm\\) (computed before)\nfin_len_leaf : final length of leaves, in \\(cm\\) (bell shaped model)\nleaf expansion duration, as \\(x * \\phi\\), in \\(^oC.day\\) (literature, cf Clerget et al., 2008, etc)\n\nCf Fournier et al, 2005; Stewart and Dwyer, 1993; Skinner and Nelson, 1995",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#distribution-of-constraint-over-growing-vegetative-organs-i.e.-internodes-and-leaves-within-a-plant",
    "href": "dynamic_model.html#distribution-of-constraint-over-growing-vegetative-organs-i.e.-internodes-and-leaves-within-a-plant",
    "title": "4  Dynamic model",
    "section": "4.4 Distribution of constraint over growing vegetative organs (i.e. internodes and leaves) within a plant",
    "text": "4.4 Distribution of constraint over growing vegetative organs (i.e. internodes and leaves) within a plant\n\n4.4.1 H0: All growing vegetative organs of a given type grow at the same speed on a given time slot, i.e. equal distribution of the gain among all growing vegetative organs.\nFor a growing vegetative organ \\(i\\) over \\(n\\) growing vegetative organs in a plant, given a constraint \\(dc(t)\\) for the plant a time \\(t\\) : \\[dc_{i}(t) = \\frac{dc(t)}{n}\\]\n\n\n4.4.2 H1: Growing vegetative organs receive a gain proportional to their sink strength related to their age until end of growth.\nFor a growing vegetative organ \\(i\\) over \\(n\\) growing vegetative organs in a plant (set \\(G^n\\)), of ages \\(a_i\\), sink strength beta function \\(\\beta (a_i)\\) and relative sink strength \\(p_i(a_i)\\), given a constraint \\(dc(t)\\) for the plant a time \\(t\\) : \\[p_i(a_i) = \\frac{\\beta (a_i)}{\\sum_{j \\in G^n} \\beta (a_j)}\\] \\[dc_i(t) = p_i(a_i) dc(t)\\]",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#visualize-a-growing-plant",
    "href": "dynamic_model.html#visualize-a-growing-plant",
    "title": "4  Dynamic model",
    "section": "4.5 Visualize a growing plant",
    "text": "4.5 Visualize a growing plant\n\n\nCode\n## Imports\n\n# from installed packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom openalea.plantgl.all import Vector3\nfrom oawidgets.plantgl import *\n\n# from archicrop\nfrom openalea.archicrop.cereals_leaf import parametric_leaf\nfrom openalea.archicrop.plant_shape import geometric_dist, bell_shaped_dist, compute_leaf_area\nfrom openalea.archicrop.plant_design import leaf_azimuth\nfrom openalea.archicrop.cereals import build_shoot\nfrom openalea.archicrop.display import display_mtg, build_scene, display_scene\n\n# Enable plotting with PlantGL\n%gui qt\n\n# Set nice color for plants\nnice_green=Color3((50,100,0))\n\n## Code for generating a 3D cereal shoot from descritive parameters\n\n# Parameters \nheight=220                 # from crop model\nnb_phy=22\nmax_leaf_length=90\n\n\nshoot, g = build_shoot(nb_phy=nb_phy,\n                        height=height,\n                        max_leaf_length=max_leaf_length,\n                        wl=0.12, diam_base=2.5, diam_top=0.5, \n                        insertion_angle=30, scurv=0.6, curvature=130,\n                        alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                        phyllotactic_angle=180,\n                        phyllotactic_deviation=0)\n\n# Build and display scene\nscene, nump = build_scene(g, \n                          leaf_material=Material(nice_green), \n                          stem_material=Material(nice_green))\n# display_scene(scene_single) # display in separate window\n# PlantGL(scene) # display in notebook\n\n\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\n\n\nCode\nfrom ipywidgets import interact, interactive, IntSlider, fixed\nfrom openalea.archicrop.dynamic import grow_plant, grow_plant_and_display\n\ndef grow_plant_and_display_in_NB(g, time):\n    g, scene, nump=grow_plant_and_display(g, time, phyllochron=35)\n    w=PlantGL(scene, group_by_color=True)\n    w.wireframe=True\n    return w\n\n# max_time = max(g.property('end_tt').values())\ninteract(grow_plant_and_display_in_NB, g=fixed(g), time=IntSlider(min=20, max=2000, step=20, value=2000))\n\n\n\n\n\n&lt;function __main__.grow_plant_and_display_in_NB(g, time)&gt;\n\n\n\n\nCode\nfrom oawidgets.mtg import plot as MTGw\nMTGw(g, properties='label')\n# g.display()\ng.property('shape_mature_length')\n\n\nLocal cdn resources have problems on chrome/safari when used in jupyter-notebook. \n\n\n{4: 1.056881219432054,\n 6: 2.117703428068028,\n 8: 4.67021697974572,\n 10: 9.817309831419477,\n 12: 17.036564295978607,\n 14: 21.137624388641076,\n 16: 26.630330249129287,\n 18: 33.312651371476484,\n 20: 41.22543399817866,\n 22: 50.287006013528845,\n 24: 60.24096862250339,\n 26: 70.61303117211311,\n 28: 80.69481342403904,\n 30: 89.57470059381421,\n 32: 96.23104508386112,\n 34: 99.6887730034242,\n 36: 99.21780788625586,\n 38: 94.52712527668697,\n 40: 85.89301291304173,\n 42: 74.16600813103841,\n 44: 60.63295999885578,\n 46: 46.760651347463366}",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#fit-plant-growth-and-development-to-lait-and-heightt-curves-from-crop-model",
    "href": "dynamic_model.html#fit-plant-growth-and-development-to-lait-and-heightt-curves-from-crop-model",
    "title": "4  Dynamic model",
    "section": "4.6 Fit plant growth and development to LAI(t) and height(t) curves from crop model",
    "text": "4.6 Fit plant growth and development to LAI(t) and height(t) curves from crop model\nTwo constraints :\n\\[ \\mathcal{A} = \\mathcal{A_scaled} = 2 w |\\int_{L}^{0} \\mathcal{C}(\\frac{s(u)}{L})d\\frac{s(u)}{L}| \\] where \\[\\mathcal{C}(x) = \\alpha x^2 - 2 (\\alpha + \\sqrt{-\\alpha}) x + 2 \\sqrt{-\\alpha} + \\alpha\\]\nand \\[ \\text{leaf length} = L  e^{-\\log(skew) * (2 (z - zmax)^2 + (z - zmax)^3)} \\]\n\n\nCode\nfrom scipy.optimize import curve_fit, least_squares\n\n# Sources\n# Toungos, 2019, 10.5281/Zendo.2653098. \n# dos Santos et al., 2022, 10.3389/fpls.2022.872738\n\ndef parametric_model_sorghum(thermal_time, max_leaf_length, phyllochron):\n    \"\"\"\n    Define parametric model.\n\n    Args:\n    - thermal_time: Input values\n    - max_leaf_length, phyllochron: Parameters of the model\n\n    Returns:\n    - leaf_areas: Output values corresponding to the model\n    \"\"\"\n    \n    height=240                 # from crop model\n    nb_phy=22\n    # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=nb_phy,\n                            height=height,\n                            max_leaf_length=max_leaf_length,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=150, \n                            alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=0)\n\n\n    leaf_areas = []\n    for t in thermal_time:\n        leaf_areas.append(sum(compute_leaf_area(grow_plant(g, time=t, phyllochron=phyllochron))))\n\n    return leaf_areas\n\n\n\n4.6.1 From STICS simulation for sorghum\n\n\nCode\n## From a STICS simulation for maize\n\ndef read_columns_from_file(filename, separator=';'):\n    with open(filename, 'r') as file:\n        columns = []\n        for line in file:\n            values = line.strip().split(separator) # Strip any extra whitespace and split the line by the separator\n            if not columns:\n                columns = [[] for _ in values]\n            while len(columns) &lt; len(values):\n                columns.append([])\n            for i, value in enumerate(values):\n                columns[i].append(value)\n            # Handle lines with fewer values than columns\n            for i in range(len(values), len(columns)):\n                columns[i].append('')\n    return columns\n\n\nfilename = 'mod_ssorghum.sti'\ncolumns = read_columns_from_file(filename)\ncolumns = columns[5:]\n\nstart = 23\nend = 94\ndensity = 0.002 # density = 20 plants/m2 = 0.002 plants/cm2\ncm_la = [float(i)/density for i in columns[1][start:end]] \ncm_height = [float(i) for i in columns[3][start:end]]\ncm_tt = np.cumsum([float(i) for i in columns[0][start:end]])\n\nx_data = []\ny_data = []\nfor i,t in enumerate(cm_tt):\n    x_data.append(t)\n    y_data.append(cm_la[i])\nx_data = np.array(x_data)  # input data\ny_data = np.array(y_data)  # output data\n\n\n\n\nCode\n# Fit the model to crop model data and obtain optimal parameters\noptimal_params, covariance = curve_fit(f=parametric_model_sorghum, xdata=x_data, ydata=y_data, bounds=([70,40],[150,90]), method='trf') # bounds to set from lit\nse = np.sqrt(np.diag(covariance))\n\nprint(\"                  Max leaf length  Phyllochron\")\nprint(\"Optimized parameters:\", optimal_params)\n# print(\"Covariances:\", covariance)\nprint(\"Standard errors:\", se)\n\n# Visualize the fit\nplt.clf()\nplt.scatter(x_data, y_data, color=(57/255,157/255,99/255), label='Simulation with STICS') # R 243, G 146, B 0\nres = parametric_model_sorghum(x_data, *optimal_params)\nplt.plot(x_data, np.array(res), color=(57/255,151/255,88/255), label='Simulation with ArchiCrop') # R 57, G 151, B 88\nplt.xlabel('Thermal time (°C.d)', fontsize=24)\nplt.ylabel('LAI', fontsize=24)\n# plt.legend()\nplt.show()\n\n\n                  Max leaf length  Phyllochron\nOptimized parameters: [150.  40.]\nStandard errors: [15874.78737097   641.53803183]\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Define the model function\ndef parametric_model_sorghum_ls(params, thermal_time, y_data):\n    \"\"\"\n    Define parametric model.\n\n    Args:\n    - thermal_time: Input values\n    - max_leaf_length, phyllochron: Parameters of the model\n\n    Returns:\n    - leaf_areas: Output values corresponding to the model\n    \"\"\"\n\n    max_leaf_length=params[0]\n    phyllochron=params[1]\n    \n    height=240                 # from crop model\n    nb_phy=22\n    # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=nb_phy,\n                            height=height,\n                            max_leaf_length=max_leaf_length,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=150, \n                            alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=0)\n\n\n    leaf_areas = []\n    for t in thermal_time:\n        leaf_areas.append(sum(compute_leaf_area(grow_plant(g, time=t, phyllochron=phyllochron))))\n\n    return y_data - leaf_areas\n\n\n\n\nCode\n# Initial guess for the parameters\nx0 = [100, 60]\n\n# Perform the least squares optimization\nresult = least_squares(parametric_model_sorghum_ls, x0, args=(x_data, y_data), method='dogbox')\n\n# Extract the optimized parameters\nmax_leaf_length_opt, phyllochron_opt = result.x\nprint(\"                   Max leaf length  Phyllochron\")\nprint(\"Optimized parameters:\", max_leaf_length_opt, phyllochron_opt)\n\n# Visualize the fit\nplt.clf()\nplt.scatter(x_data, y_data, label='Data')\nplt.plot(x_data, parametric_model_sorghum(x_data, *result.x), color='red', label='Fitted Curve')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n\n\n                   Max leaf length  Phyllochron\nOptimized parameters: 29.24111279016299 1.9071078554697427\n\n\n\n\n\n\n\n\n\n\n\nCode\n## Imports\n\n# from installed packages\nfrom random import *\n\n# from archicrop\nfrom openalea.archicrop.stand import agronomic_plot\n\n# Enable plotting with PlantGL\n%gui qt\n\n## Code for generating ...\n# Fix a seed\nseed(100)\n\n# Initialize the list of plants\nplants_in_crop=[]\n\n# Fixed parameters for all plants\nlength_plot=5\nwidth_plot=5\nsowing_density=8\nplant_density=8\ninter_row=0.4\nnplants, positions, domain, domain_area, unit = agronomic_plot(length_plot, \n                                                               width_plot, \n                                                               sowing_density, \n                                                               plant_density, \n                                                               inter_row, \n                                                               noise=0.1)\n\n# For loop over all the plants in the crop\nfor n in range(nplants):\n\n    # Parameters \n    # max_leaf_length=optimal_params[0]\n    # phyllochron=50\n\n    # height=240                 # from crop model\n    # nb_phy=22\n    # # max_leaf_length=100\n    \n    \n    shoot, g = build_shoot(nb_phy=26,\n                            height=223,\n                            max_leaf_length=100,\n                            wl=0.12, diam_base=2.5, diam_top=0.5, \n                            insertion_angle=30, scurv=0.4, curvature=90, \n                            alpha=-2.3, stem_q=1, rmax=0.67, skew=0.05, # 0.0005\n                            phyllotactic_angle=180,\n                            phyllotactic_deviation=30,\n                            plant_orientation=random()*360)\n    \n    # Fill the list of plants\n    plants_in_crop.append(g) # put all plants in the same mtg to be able to visualize the dynamic growth easily\n\n# Build and display scene\nscene_var, nump = build_scene(plants_in_crop, positions, leaf_material=Material(nice_green), stem_material=Material(nice_green))\nPlantGL(scene_var)\n# interact(grow_plant_and_display_in_NB, g=fixed(plants_in_crop), time=IntSlider(min=20, max=2000, step=20, value=1000))\n\n\n\n\n\n\n\nCode\nx_data = []\ny_data = []\nfor i,t in enumerate(cm_tt):\n    x_data.append(t)\n    y_data.append(cm_height[i])\nx_data = np.array(x_data)  # input data\ny_data = np.array(y_data)  # output data\n\nplt.clf()\nplt.scatter(x_data, y_data, color=(243/255,146/255,0/255), label='Simulation with STICS') # R 243, G 146, B 0\nplt.xlabel('Thermal time (°C.d)', fontsize=24)\nplt.ylabel('Height (m)', fontsize=24)\n# plt.legend()\nplt.show()",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#leaf-senescence",
    "href": "dynamic_model.html#leaf-senescence",
    "title": "4  Dynamic model",
    "section": "4.7 Leaf senescence",
    "text": "4.7 Leaf senescence\nYellow leaves corresponding to yellow LAI in STICS\nAge-dependent senescence, from tip to base, following the same dynamics as growth dynamics",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "dynamic_model.html#next-steps",
    "href": "dynamic_model.html#next-steps",
    "title": "4  Dynamic model",
    "section": "4.8 Next steps",
    "text": "4.8 Next steps\n\nFit for height (problem of non matching supposed vs actual height)\nBending dynamics of leaves and tillers",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Dynamic model</span>"
    ]
  },
  {
    "objectID": "light_inter.html",
    "href": "light_inter.html",
    "title": "5  Light interception with Caribu",
    "section": "",
    "text": "5.1 Next steps\nimport os\nos.cpu_count()\n\n16",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Light interception with Caribu</span>"
    ]
  },
  {
    "objectID": "light_inter.html#next-steps",
    "href": "light_inter.html#next-steps",
    "title": "5  Light interception with Caribu",
    "section": "",
    "text": "Configure Caribu to mimic what happens in STICS’ 2.5D formalism, cf https://vezy.github.io/STICS-IC-paper/\nSimulations to run with IFB Cloud",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Light interception with Caribu</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PhD Oriane",
    "section": "",
    "text": "Preface\nThis book keeps track of the work made during the PhD of Oriane Braud, entitled “Multiscale hybrid modeling framework for intercrops: the best of plant and crop models”. This PhD is carried out from November 2023 to 2026 at CIRAD (UMRs AGAP and AMAP), as part of European project IntercropValuES, and is supervised by Myriam Adam, Marc Jaeger, Christophe Pradal, Remi Vezy and Thomas Arsouze.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "abstract.html",
    "href": "abstract.html",
    "title": "Abstract",
    "section": "",
    "text": "1. Concevoir un FSPM contraint par un modèle de culture pour les cultures intercalaires\nUn FSPM dynamique paramétrique, aérien et racinaire, adapté pour les céréales et les légumineuses, et visant à être contraint par les sorties d’un modèle de culture (par exemple, reconstruire la croissance et le développement d’une plante à partir du LAI et de la hauteur du couvert pour la partie aérienne) est en cours de création.\nCela laisse autant de degrés de liberté que la structure 3D implémentée dans le modèle le permet, et donc une variabilité architecturale aussi grande qu’il y a de paramètres architecturaux. En somme, le but est de pouvoir représenter un modèle de culture avec une structure 3D et un arrangement spatial explicite des cultures intercalaires.\nRéalisation : modèle FSPM",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "abstract.html#identifier-les-processus-perfectibles-des-modèles-de-culture",
    "href": "abstract.html#identifier-les-processus-perfectibles-des-modèles-de-culture",
    "title": "Abstract",
    "section": "2. Identifier les processus perfectibles des modèles de culture",
    "text": "2. Identifier les processus perfectibles des modèles de culture\nEn utilisant le FSPM précédemment créé, il sera possible, pour une simulation avec un modèle de culture, d’en obtenir un grand nombre en explorant un espace phénotypique défini pour chaque espèce par les paramètres architecturaux non pris en compte dans le modèle de culture, ainsi qu’en modifiant l’arrangement spatial explicite des cultures intercalaires. Une vaste expérience de simulation sera réalisée pour comprendre comment les différents processus (interception de la lumière, absorption de l’eau et de l’azote, etc.) sont modifiés en fonction des variations des caractéristiques architecturales des plantes, de l’arrangement spatial des cultures intercalaires, mais aussi en tenant compte de l’échelle spatiale et temporelle des processus simulés.\nDes analyses statistiques (comparaison de moyennes, analyse de la variance, de propagation d’incertitude, de sensibilité) seront faites sur les sorties de ces simulations pour identifier les processus pour lesquels la prise en compte d’échelles plus fines a une influence, ainsi que des paramètres d’intérêt.\nLes espèces et variétés de plantes utilisées pour simuler les cultures intercalaires seront choisies en fonction de la paramétrisation existante de STICS pour les cultures intercalaires, ainsi que des expériences disponibles dans le projet IntercropValuES.\nRéalisation : méthodologie + application avec STICS",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "abstract.html#tester-différentes-approches-pour-améliorer-la-prise-en-compte-des-paramètres-structuraux-dintérêt-pour-la-modélisation-des-cultures-intercalaires-dans-les-formalismes-du-modèle-de-culture-stics-intercrop-avec-une-approche-multi-échelle",
    "href": "abstract.html#tester-différentes-approches-pour-améliorer-la-prise-en-compte-des-paramètres-structuraux-dintérêt-pour-la-modélisation-des-cultures-intercalaires-dans-les-formalismes-du-modèle-de-culture-stics-intercrop-avec-une-approche-multi-échelle",
    "title": "Abstract",
    "section": "3. Tester différentes approches pour améliorer la prise en compte des paramètres structuraux d’intérêt pour la modélisation des cultures intercalaires dans les formalismes du modèle de culture STICS-Intercrop avec une approche multi-échelle",
    "text": "3. Tester différentes approches pour améliorer la prise en compte des paramètres structuraux d’intérêt pour la modélisation des cultures intercalaires dans les formalismes du modèle de culture STICS-Intercrop avec une approche multi-échelle\nLes processus identifiés précédemment seront étudiés à différentes échelles spatiales et temporelles. Pour passer d’une échelle (par exemple l’échelle de l’organe) à une autre (par exemple l’échelle de la culture), plusieurs stratégies seront étudiées : comment trouver un modèle analytique équivalent pour l’absorption d’eau en utilisant des hypothèses homogènes (Couveur et al., 2012) ? Comment estimer un modèle de substitution basé sur la sortie du modèle à une échelle plus fine pour capturer les propriétés émergentes ? Ou encore, comment concevoir des modèles hybrides en combinant des modules existants à la même échelle ou à des échelles différentes ?\nCela conduira à de nouveaux formalismes dans le modèle de culture.\nRéalisation : nouveaux formalismes pour la prochaine version de STICS",
    "crumbs": [
      "Abstract"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "In progress …\nTalk about intercropping as an agro-ecological practice, the barriers, the importance of modeling, the existing models (crop and FSPM) and their characteristics, their limits as for modeling intercrops, focus on evaluating how hypotheses in crop models are off the mark, for processes occuring in shoot and root, and how to modify the formalisms corresping to processes that are off the mark in STICS crop model in particular.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro_1.html",
    "href": "intro_1.html",
    "title": "2  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro_2.html",
    "href": "intro_2.html",
    "title": "6  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro_3.html",
    "href": "intro_3.html",
    "title": "7  Introduction",
    "section": "",
    "text": "In progress …",
    "crumbs": [
      "Third chapter: Improving STICS",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "year_1.html",
    "href": "year_1.html",
    "title": "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability",
    "section": "",
    "text": "Analysis - shoot: Does considering plant shoot structural variability change a crop model’s outputs in an intercropping context ?\nHypothesis: The error of crop models, when it comes to modeling intercrops, are mainly due to the average plant hypothesis and the non-consideration of the plant shoot architecture.\nIs the variability generated by structural considerations large enough to unvalidate crop model hypotheses ?\nWhat is the sensitivity of intercrops to variations of plant structure (and spatial arrangement) ?\nHow do the uncertainties linked to crop model hypotheses propagate when considering plant structure ?\nDevelop a dynamic shoot parametric FSPM for each type of plant (cereals and legumes, inspiration from OpenAlea models Cereal, L-Pea, WeberPenn, etc., to adapt for intercrops for which we have data), where growth is constrained by outputs from a crop model (e.g. LAI(t) and height(t)), leaving degrees of freedom for features that are not explicitly considered in the crop model (e.g. plant architecture and spatial arrangement).\nImplement well-known structural reactions to stresses.\nRun simulations of various GxGxExM with both FSPM and STICS (stressless and stressed conditions : Vezy et al., 2023; Traore et al., 2022, 2023), varying (define variations ranges) when possible: shoot structures (explore phenotypic space, i.e. create many morphotypes), spatial arrangement (with all same plants or all different to separate effects), env/stresses (N, water, light)\nFrom outputs from my models and from STICS for given processes and given conditions:\n- Compare means and analyze variance of chosen output variables: light intercepted, RUE, N demand /organ, etc.\n- Analyse uncertainty propagation in simulations. Expected results: see which processes are the most impacted by the uncertainty in crop model outputs.\n- Analyse sensitivity of some plant processes to structural variability and spatial heterogeneity. Expected results: spot parameters of interest that can make a change if better considered in a crop model when modeling intercrops.\nUnvalidate some formalisms in STICS",
    "crumbs": [
      "First chapter: Analyzing accuracy of formalisms in crop model when adding shoot structural variability"
    ]
  },
  {
    "objectID": "year_2.html",
    "href": "year_2.html",
    "title": "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability",
    "section": "",
    "text": "Analysis - root : Would considering root structure in an intercropping system be relevant for crop models ?\nHypothesis: The error of crop models, when it comes to modeling intercrops, are mainly due to the average plant hypothesis and the non-consideration of the plant root architecture.\nCreate a dynamic root FSPM for all 4 plants (cf lit), that enables to constrain root growth with density=f(depth) from STICS, in STICS’ 1D soil.\nImplement well-known structural reactions to stresses.\nRun simulations with both FSPM and STICS (stressless and stressed conditions : Vezy et al., 2023; Traore et al., 2022, 2023), varying (define variations ranges) when possible: root structures, spatial arrangement (with all same plants or all different to separate effects), env/stresses (N, water, light)\nFrom outputs from my models and from STICS for given processes and given conditions:\nCompare means and analyze variance of chosen output variables: water and N uptake, N fixing, etc.\nAnalyse uncertainty propagation in simulations; expected results: see which processes (integrated in root density) are the most impacted by the uncertainty in STICS’ root density.\nAnalyse sensitivity of some plant processes to structural variability (and spatial heterogeneity). Expected results: spot parameters of interest to implement in STICS as a parameter or different equation.\nCouple shoot and root models (when ?)\nCollaboration with post-doc from WUR, Jie Lu",
    "crumbs": [
      "Second chapter : Analyzing accuracy of formalisms in crop model when adding root structural variability"
    ]
  },
  {
    "objectID": "year_3.html",
    "href": "year_3.html",
    "title": "Third chapter: Improving STICS",
    "section": "",
    "text": "Modeling : How to model intercrops more accurately at crop scale, considering spatial issues when needed ?\nHypothesis: New crop models formalisms created through a multiscale approach would enable a better accuracy of the crop models.\nWhich formalisms would enable to translate spatial and structural considerations for chosen plant processes in a crop model ?\nFor each plant process targeted previously:\n- Develop formalisms to implement in STICS, by any appropriate method.\n- Run simulations and compare with simulations with previous version and with field data, to make sure new version of STICS fits data even better. (see with Mathilde de Freitas ?)",
    "crumbs": [
      "Third chapter: Improving STICS"
    ]
  }
]